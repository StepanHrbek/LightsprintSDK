// Realtime Radiosity Viewer ubershader
//
// options controlled by program:
//  #define SHADOW_MAPS 6
//  #define SHADOW_SAMPLES 4
//  #define LIGHT_DIRECT_MAP
//  #define LIGHT_INDIRECT_COLOR
//  #define LIGHT_INDIRECT_MAP
//  #define MATERIAL_DIFFUSE_COLOR
//  #define MATERIAL_DIFFUSE_MAP
//  #define FORCE_2D_POSITION

varying vec4 shadowCoord[SHADOW_MAPS];

uniform vec3 lightDirectPos;

#ifdef LIGHT_INDIRECT_COLOR
varying vec4 lightIndirectColor;
#endif

#ifdef MATERIAL_DIFFUSE_MAP
varying vec2 materialDiffuseCoord;
#endif

#ifdef MATERIAL_DIFFUSE_COLOR
varying vec4 materialDiffuseColor;
#endif

void main()
{
  // direct light
  vec3 lightDirectDir = normalize(lightDirectPos - gl_Vertex.xyz);
  gl_FrontColor = vec4(dot(lightDirectDir, gl_Normal));

#ifdef LIGHT_INDIRECT_COLOR
  // indirect light
  lightIndirectColor = gl_Color * 2.0; // 2.0 makes indirect more visible, not realistic
#endif

#ifdef MATERIAL_DIFFUSE_MAP
  materialDiffuseCoord = gl_MultiTexCoord0.xy;
#endif

#ifdef MATERIAL_DIFFUSE_COLOR
  materialDiffuseColor = gl_Color;
#endif

  //for(int i=0;i<SHADOW_MAPS;i++)
  //  shadowCoord[i] = gl_TextureMatrix[i] * gl_Vertex;
  // ATI is reported to fail on previous cycle, unrolled version is ok:
#if SHADOW_MAPS>0
  shadowCoord[0] = gl_TextureMatrix[0] * gl_Vertex;
#endif
#if SHADOW_MAPS>1
  shadowCoord[1] = gl_TextureMatrix[1] * gl_Vertex;
#endif
#if SHADOW_MAPS>2
  shadowCoord[2] = gl_TextureMatrix[2] * gl_Vertex;
#endif
#if SHADOW_MAPS>3
  shadowCoord[3] = gl_TextureMatrix[3] * gl_Vertex;
#endif
#if SHADOW_MAPS>4
  shadowCoord[4] = gl_TextureMatrix[4] * gl_Vertex;
#endif
#if SHADOW_MAPS>5
  shadowCoord[5] = gl_TextureMatrix[5] * gl_Vertex;
#endif
#if SHADOW_MAPS>6
  shadowCoord[6] = gl_TextureMatrix[6] * gl_Vertex;
#endif
#if SHADOW_MAPS>7
  shadowCoord[7] = gl_TextureMatrix[7] * gl_Vertex;
#endif
#if SHADOW_MAPS>8
  shadowCoord[8] = gl_TextureMatrix[8] * gl_Vertex;
#endif
#if SHADOW_MAPS>9
  shadowCoord[9] = gl_TextureMatrix[9] * gl_Vertex;
#endif
  
#ifdef FORCE_2D_POSITION
  gl_Position = vec4(gl_MultiTexCoord7.x,gl_MultiTexCoord7.y,0.5,1);
#else
  gl_Position = ftransform();
#endif
}

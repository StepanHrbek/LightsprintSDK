
SHADOW MAPPING SOURCE CODE EXAMPLE for NVIDIA GPUs
---------------------------------------------------

Now updated for GeForce3 hardware shadow mapping...

Now the "shadowcast" demo contains code using the GeForce3's
hardware shadow mapping functionality via the OpenGL SGIX_shadow and
SGIX_depth_texture extensions.  Information about these extension can
be found at:

  http://oss.sgi.com/projects/ogl-sample/registry/SGIX/shadow.txt
  http://oss.sgi.com/projects/ogl-sample/registry/SGIX/depth_texture.txt

The updated demo also uses the NV_texture_rectangle extension to support
non-power-of-two dimensions for shadow map textures.  Information on
this extension can be found at:

  http://oss.sgi.com/projects/ogl-sample/registry/NV/texture_rectangle.txt  

Further information about shadow mapping can be found on the NVIDIA
Developer Relations web site at:

  http://developer.nvidia.com/view.asp?IO=cedec_shadowmap
  http://developer.nvidia.com/view.asp?IO=ogl_shadowmap 
  http://developer.nvidia.com/view.asp?IO=shadow_mapping

Along with the hardware shadow mapping support, the source code example
in this directory demonstrates a dual-texture shadow mapping technique
originally described by Wolfgang Heidirch.  The example program runs on
a TNT, TNT2, GeForce, Quadro, or later NVIDIA GPU.  The program requires
the ARB_multitexture extension and either the EXT_texture_env_combine
or NV_register_combiners extension.  Make sure your TNT or TNT2 has the
latest drivers that support the EXT_texture_env_combine extension.

The program uses per-vertex lighting, dual projective textures, texture
coordinate generation, alpha testing, and extended texture environment
functionality to implement an 8-bit precision shadow map.

Because this program uses per-vertex lighting and texture coordinate
generation, this program runs best on hardware accelerates Transform &
Lighting (T&L) operations such as an NVIDIA GeForce or Quadro GPU.

Also on a GeForce, Quadro, or later NVIDIA GPU (but not on TNT or
TNT2), the program supports a 16-bit precision shadow map via the
NV_register_combiners extension.  The trick is to divide the 16-bit
shadow map precision into an upper 8-bit value and a lower 8-bit value.
In two rendering passes, the NV_register_combiners can implement a
digit-wise comparison of the upper and loer values.  The
NV_register_combiners extension (and its GeForce3 improvements) are
described at:

 http://oss.sgi.com/projects/ogl-sample/registry/NV/register_combiners.txt 
 http://oss.sgi.com/projects/ogl-sample/registry/NV/register_combiners2.txt 

The shadow mapping technique is notable because it can accurately shadow
all objects in the scene and automatically handles self-shadowing
situations.  Shadow mapping relies on a pixel-precision depth map
texture constructed via depth buffering to determine shadow occlusion
and therefore needs no vertex-level application knowledge of the scene
geometry for determining shadow occlusion as required by other shadow
techniques such as stenciled shadow volumes.

This program works best on a GeForce or Quadro (or later NVIDIA GPU)
using NVIDIA's Release 5 or later Windows display drivers.  The Release
5 GeForce/Quadro drivers have substantially improved the performance of
depth buffer glReadPixels operation that are heavily used by this demo.

What the keys do:

  'h' - shows and dismisses help message
  'e' - show eye view without shadows
  's' - show eye view WITH shadows
  't' - show textured view
  'w'  - toggle wire frame
  'r' - when in textured view, toggle between light z range and
        projected depth map mode
  'd' - show the depth map texture
  'a' - toggle between showing MSBs and LSBs in 16-bit mode for
        depth map and textured view
  'm' - toggle whether the left or middle mouse buttons control
        the eye and view positions (helpful for systems with
	only a two-button mouse)
  'o' - increment object configurations
  'O' - decrement object configurations

        available object configurations
	-------------------------------------------------------------------
	sphere grid - a 3D grid of red and green shiny balls
	NVIDIA logo - an extruded NVIDIA logo
	weird helix - a weird helix (use arrow keys to twist and grow)
	combo       - both the NVIDIA logo and the weird helix
	simple      - a green box and a red sphere
	blue pony   - the green box and red sphere with a blue pony
	              (space bar animates; up/down keys control pony speed)
	-------------------------------------------------------------------

  'f' - toggle showing the depth map frustum in dashed lines
  'p' - narrow shadow frustum field of view
  'P' - widen shadow frustum field of view
  'n' - compress shadow frustum near clip plane
  'N' - expand shadow frustum near clip plane
  'c' - compress shadow frustum far clip plane
  'C' - expand shadow frustum far clip plane
  'b' - increment the depth bias for 1st pass glPolygonOffset
  'B' - decrement the depth bias for 1st pass glPolygonOffset
  'q' - increment depth slope for 1st pass glPolygonOffset
  'Q' - increment depth slope for 1st pass glPolygonOffset
  '1' - use 64x64 depth map
  '2' - use 128x128 depth map
  '3' - use 256x256 depth map
  '4' - use 512x512 depth map
  '5' - use 1024x1024 depth map
  '8' - toggle between 8-bit and 16-bit depth map precision
        (only works on GeForce, Quadro, and later NVIDIA GPUs)
  '9'  - toggle 16-bit and 24-bit depth map precison for hardware shadow mapping
  'z' - toggle zoom in and zoom out
  'F1' - toggle hardware versus dual-texture shadow mapping
  'F2' - toggle quick light move (quater size depth map during light moves)
  'F3' - toggle back face culling during depth map construction
  'F4' - toggle linear/nearest hardware depth map filtering
  'F5' - toggle CopyTexSubImage versus ReadPixels/TexSubImage
  'F6' - toggle square versus rectangular texture

What the mouse does:

  left button    - rotates eye position around
  middle button  - rotates eye position around
  right button   - pop-up menu

The 'm' key reverses the behavior of the left and middle mouse buttons
(important if you lack a three button mouse!).

The "-fullscreen" command line option runs the program in 800x600
32-bit mode.  The pop-up menu is not available in fullscreen mode.
See the source code for other command-line options.  

For more information about this technique see Wolfgang Heidrich's
Doctoral thesis and SGI's projective texturing SIGGRAPH paper.

  Wolfgang Heidrich, "High-quality Shading and Lighting
  for Hardware-accelerated Rendering", PhD thesis,
  University of Erlangen, Computer Graphics Group, 1999.
  http://www.mpi-sb.mpg.de/~heidrich/Thesis/phd.pdf

  Segal, Korobkin, van Windenfelt, Foran, and Haeberli, "Fast Shadows
  and Lighting Effects using Texture Mapping", SIGGRAPH '92 Proceedings,
  pages 249-252, July 1992.

Thanks to Wolfgang for the inspiration for this program!  Thanks to
Michael McCool for suggesting extending Wolfgang's technique to shadow
map precisions beyond 8 bits.

- Mark J. Kilgard <mjk@nvidia.com>
  NVIDIA Software Engineering
  November 30, 2001

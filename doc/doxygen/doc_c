namespace rr
{

/**


\mainpage Lightsprint Collider SDK

 \image html intro.jpg

 Welcome to Lightsprint Collider Software Development Kit.

 - <b> \subpage main_features </b>

 - <b> \subpage main_platforms </b>

 - <b> \subpage main_conventions "Conventions (units, scale, floats...)" </b>

 - <b> \subpage main_api </b>

 - <b> \subpage main_samples </b>




\page main_features Features

This is brief list of Lightsprint Collider features, see \ref main_api
and samples for more details.

Ray-Mesh collisions
- up to 200x faster than commercial physical engines
- small memory footprint, typically 10x smaller than commercial physical engines
- multithreaded
- up to 4294967295 vertices in mesh
- up to 1073741824 triangles in mesh
- triangle lists/strips/indexed/nonindexed
- floats, doubles, halfs, ints, shorts
- custom mesh data structures without data duplication
- uniform scaling, non uniform scaling
- singlesided tests, doublesided tests
- number of sides defined by material
- return one or gather all collisions
- custom action at collision
- returns intersection distance, 2D and 3D position
- returns normal, plane and face side that was hit
- high precision, higher than commercial physical engines
- high reliability, 7 years under heavy load





\page main_platforms Supported platforms

 \section plat_bin Platforms for binaries
 For binary libraries, supported platforms are
 - Windows Vista
 - Windows XP
 - ask for more

 Supported CPUs are
 - x86 compatible with SSE
 - ask for more

 Supported library configurations are
 - Release DLL
 - Debug DLL

 Supported compilers:
 - Visual C++ 2005 SP1
 - ask for more

 Compilers with no known issues:
 - Visual C++ 2005
   with <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=200B2FD9-AE1A-4A14-984D-389C36F85647&displaylang=en">Microsoft Visual C++ 2005 SP1 Redistributable Package (x86)</a> installed
 - Visual C++ 2003
   with <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=200B2FD9-AE1A-4A14-984D-389C36F85647&displaylang=en">Microsoft Visual C++ 2005 SP1 Redistributable Package (x86)</a> installed

 \section plat_src Platforms for source code
 Our source code conforms to standard <b>ISO C++</b>, so you should be 
 able to use it on nearly any platform (consoles, linux etc).

 There are optional optimizations, that use SSE instructions on x86 CPUs,
 but they can be omitted on other platforms.



 
\page main_conventions Conventions

 \section gunits2 Units
   All sizes and positions in space are expressed in generic units,
   Lightsprint doesn't need to know if it's meter, inch or parsec.

 \section gowner Ownership
   Dynamically created objects (using new) are never adopted, ownership never changes.
   \n This means that parameters that need to be destructed are never destructed inside call,
   responsibility for object is never passed to someone else.
   When you create object (using create() etc.), always delete it when it's
   no longer needed.

 \section gref Reference counting
   There is no internal reference counting, so if you create collider out of mesh,
   you are not allowed to destroy mesh before destroying collider. This danger should be
   mentioned on all appropriate places.

 \section gfinite Finite numbers
   If not otherwise specified, all inputs must be finite numbers.
   With Inf or NaN on input, result of any operation is undefined.

 \section gflodoub Floats and doubles
   Library uses both floats and doubles.
   It is not allowed to break double arithmetics by modifying FPU states.
   If you use Direct3D, make sure you don't instruct it to force single precision for whole application
   which breaks double precision arithmetics in whole program and libraries.

 \section gnull NULL
   Although NULL is obsoleted by C++ and some discourage from using it,
   we continue using it to distinguish zeros for pointers from zeros for non-pointers.
   So if you see x=0, x is NOT a pointer.
   If you see x=NULL, x IS a pointer.






\page main_samples Samples

 Directory samples in the SDK contains following projects:

 Sample <b>HelloMesh</b> shows the most simple case of mesh creation.

 Sample <b>HelloCollider</b> shows the most simple case of ray-mesh collision
 test.

 <b>BunnyBenchmark</b> measures Collider performance for comparison with
 other engines (Collider results are up to 200x better than commercial
 physical engines). BunnyBenchmark uses OpenMP to employ all available
 CPUs/cores.





\page main_api API overview

 Lightsprint Collider API consists of two libraries:

 - <b> \subpage api_collider "COLLIDER" </b> - finds ray-mesh intersections

 - <b> \subpage api_mesh "MESH" </b> - unifies access to triangle meshes





\page api_collider Collider
 Finds ray-mesh intersections.

 Header: RRCollider.h

 - thread safe, you can calculate any number of intersections at the same time
 - you can select technique in range from maximal speed to zero memory allocated
 - up to 2^32 vertices and 2^30 triangles in mesh
 - builds helper-structures and stores them in cache on disk

 Sample HelloCollider shows the most simple usage scenario:
 -# Create RRMesh using your vertex/index buffers.
 -# Create RRCollider using your mesh.
 -# Create RRRay using your ray.
 -# Call RRCollider::intersect() to find intersections. Repeat for all rays.

 Sample BunnyBenchmark shows how to detect collisions on all available
 CPUs/cores at once.



\page api_mesh Mesh
 Powerful interface to 3d triangle mesh.

 Header: RRMesh.h

 - knows tristrips, trilists, indexed or not (RRMesh::create, RRMesh::createIndexed)
 - can optimize:
   - vertex stitching (RRMesh::createOptimizedVertices)
   - removes degenerated triangles (RRMesh::createOptimizedTriangles)
 - merges many small meshes into one big mesh without additional memory (RRMesh::createMultiMesh)
 - saves/loads to disk (RRMesh::save, RRMesh::load)
 - extensible, you can add new channels like texture coords (RRChanneledData)
 - allows for procedural meshes, requires no memory (implementing your RRMesh takes few minutes)
 - up to 2^32-2 vertices and 2^32-2 triangles in mesh
 - thread safe, you can use mesh in any number of threads at the same time

 Sample HelloMesh shows the most simple usage scenario,
 mesh is created out of existing array of vertices.

 <hr>
 Basic math classes used by whole Lightsprint SDK.

 Header: RRMath.h

 - RRReal holds one real number, which is single precision float
 - RRVec2 is vector of 2 real numbers
 - RRVec3 is vector of 3 real numbers
 - RRVec4 is vector of 4 real numbers

 <hr>
 Debugging and reporting routines used by whole Lightsprint SDK.

 Header: RRDebug.h

 - RRReporter processess all messages sent by Lightsprint SDK to you

*/

};

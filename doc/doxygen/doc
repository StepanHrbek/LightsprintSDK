/**


\mainpage Lightsprint SDK
Welcome to Lightsprint libraries.

\subpage news "What's new"
 - what's new in releases

\subpage vision "Lightsprint VISION"
 - calculates radiosity / global illumination

\subpage collider "Lightsprint COLLIDER"
 - finds ray-mesh intersections

\subpage rules "Coding rules"
 - general rules for programming with SDK

\subpage platforms "Supported platforms"
 - platforms supported by Lightsprint



\page platforms Supported platforms

\section plat_bin Platforms for binaries
 At least parts of both \ref vision "Vision" and \ref collider "Collider" are
 delivered in compiled binary form.

 Supported platforms are
 - Win32
 - (fully tested also under Windows XP x64, where it runs in 32bit)

 Supported CPUs are
 - x86 compatible with SSE

 Binaries may work with multiple compilers, but only these are tested:
 - Visual C++ 2003
 - Visual C++ 2005

\section plat_src Platforms for source code
 With appropriate license, \ref collider "Collider" may be delivered 
 also in form of source code.

 Our source code conforms to standard <b>ISO C++</b>, so you should be 
 able to use Collider on nearly <b>any platform</b>.

 There are optional optimizations, that use SSE instructions on x86 CPUs,
 but they may be omitted on other platforms.


 
\page rules Coding rules
 These rules apply to all interfaces in SDK:
 - If not otherwise specified, all inputs must be finite numbers.
   With Inf or NaN, result is undefined.
 - Parameters that need to be destructed are always destructed by caller.
 - Library uses both floats and doubles.
   It is not allowed to break double arithmetics by modifying FPU states.
   If you use Direct3D, make sure you don't instruct it to force single precision for whole application.



\page vision Lightsprint Vision
 Calculates radiosity / global illumination.

 Header: RRVision.h
 \n Namespace: rrVision

\section vision1 Library overview
 - calculates global illumination in static scene
 - progressive refinement with permanent access to results
 - calculated illumination is available in vertices
 - optimized for speed, usage in interactive environments
 - works with your units (screen colors or radiometry or photometry units or anything else)
 - display independent, purely numerical API

\section vision3 Basic usage scenario
 -# Show your license number to rrVision::RRLicense.
 -# Create rrVision::RRScene.
 -# Create rrVision::RRObjectImporter using your object and insert it into scene. Repeat for all objects.
 -# Calculate global illumination using rrVision::RRScene::illuminationImprove().
 -# Read results using rrVision::RRScene::getTriangleMeasure().

\section vision4 Notes
 - Although whole documentation talks in radiometry terms,
   it is possible to work in photometry units, screen colors 
   or any other units. Everything you need is to setup appropriate
   convertor, see rrVision::RRScaler.



\page collider Lightsprint Collider
 Finds ray-mesh intersections.

 Header: RRCollider.h
 \n Namespace: rrCollider

\section collider1 Library overview
 - thread safe, you can calculate any number of intersections at the same time
 - you can select technique in range from maximal speed to zero memory allocated
 - up to 2^32 vertices and 2^30 triangles in mesh
 - builds helper-structures and stores them in cache on disk

\section collider3 Basic usage scenario
 -# Show your license number to rrCollider::RRLicense.
 -# Create rrCollider::RRMeshImporter using your mesh.
 -# Create rrCollider::RRCollider using your mesh importer.
 -# Create rrCollider::RRRay using your ray.
 -# Call rrCollider::RRCollider::intersect() to find intersections. Repeat for all rays.



\page news What's new

\section news3 2006.3.xx

NEW FEATURES

- RRMeshImporter::MultiMeshPreImportNumber
  \n defines format of PreImport index in MultiMesh
  \n simplifies work with MultiMeshes created by rrCollider::RRMeshImporter::createMultiMesh()

CHANGES

- column-major RRMatrix4x4 replaced by row-major RRMatrix3x4
- enhanced documentation, 20kB of descriptions added
- on several places, behaviour is defined for invalid inputs


\section news2 2006.3.10

NEW FEATURES

- sample "HelloVision"
  \n performs minimalistic illumination calculation
  \n gives first insight into Vision usage


\section news1 2006.2.26

NEW FEATURES

- documentation
- rrVision::RRSideBits
  \n precise surface behaviour control
  \n allows to simulate new range of surfaces
- rrVision::RRScaler
  \n automatic input and output scaling
  \n simplifies work with any units including radiometric,
  photometric and linear screen space
- rrVision::RRRadiometricMeasure
  \n more general interface to many inputs and outputs
  \n simplifies data transfers
- rrCollider::RRMeshImporter::verify()
  \n mesh importer correctness verification
  \n simplifies testing mesh data and writing new importers
- rrVision::RRAdditionalObjectImporter
  \n simplifies transfer of captured primary illumination
- rrCollider::RRVec2, rrCollider::RRVec3, rrCollider::RRVec4, rrVision::RRMatrix4x4
  \n primitives with basic mathematics
  \n simplifies inputs and outputs, adds type control
- rrVision::RRSceneStatistics
  \n new statistics of scene processing
  \n gives insight into processing when needed

CHANGES

- +2% faster on average
- more input data verifications during calculation
- \#define RR*_IMPORT no longer needed

*/

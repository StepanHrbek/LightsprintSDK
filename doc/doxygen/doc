/**


\mainpage Lightsprint
Welcome to Lightsprint libraries.

\subpage news "What's new"
- what's new in releases

\subpage vision "Lightsprint VISION"
- calculates radiosity / global illumination

\subpage collider "Lightsprint COLLIDER"
- finds ray-mesh intersections



\page vision Lightsprint Vision
 Calculates radiosity / global illumination.

 Header: RRVision.h
 \n Namespace: rrVision

\section vision1 Library overview
 - optimized for speed, usage in interactive environments
 - progressive refinement with first approximative global illumination after 1ms
 - automatic mesh optimizations
 - works with your units (screen colors or radiometry or photometry units or anything else)
 - display independent, purely numerical API

\section vision2 General rules
 If not otherwise specified, all inputs must be finite numbers.
 With Inf or NaN, result is undefined.

 Parameters that need to be destructed are always destructed by caller.

\section vision3 Basic usage scenario
 -# Show your license number to RRLicense.
 -# Create rrVision::RRScene.
 -# Create rrVision::RRObjectImporter using your object and insert it into scene. Repeat for all objects.
 -# Calculate global illumination using scene->illuminationImprove().
 -# Read results using scene->getTriangleMeasure().

\section trial1 Trial version limits
 All features of full version are present in trial version,
 but maximal size of scene is limited.



\page collider Lightsprint Collider
 Finds ray-mesh intersections.

 Header: RRCollider.h
 \n Namespace: rrCollider

\section collider1 Library overview
 - thread safe, you can calculate any number of intersections at the same time
 - you can select technique in range from maximal speed to zero memory allocated
 - up to 2^32 vertices and 2^30 triangles in mesh
 - builds helper-structures and stores them in cache on disk

\section collider2 General rules
 If not otherwise specified, all inputs must be finite numbers.
 With Inf or NaN, result is undefined.

 Parameters that need to be destructed are always destructed by caller.

\section collider3 Basic usage scenario
 -# Show your license number to RRLicense.
 -# Create rrCollider::RRMeshImporter using your mesh.
 -# Create rrCollider::RRCollider using your mesh importer.
 -# Create rrCollider::RRRay using your ray.
 -# Call collider->inretsect(ray) to find intersections. Repeat for all rays.

\section trial2 Trial version limits
 Trial version is fully functional, but collisions with very large meshes
 are not accelerated.



\page news What's new

\section s 2006/2/26

NEW FEATURES

- documentation
- rrVision::RRSideBits
  \n precise surface behaviour control
  \n allows to simulate new range of surfaces
- rrVision::RRScaler
  \n automatic input and output scaling
  \n simplifies work with any units including radiometric,
  photometric and linear screen space
- rrVision::RRRadiometricMeasure
  \n more general interface to many inputs and outputs
  \n simplifies data transfers
- rrCollider::RRMeshImporter::verify()
  \n mesh importer correctness verification
  \n simplifies testing mesh data and writing new importers
- rrVision::RRAdditionalObjectImporter
  \n simplifies transfer of captured primary illumination
- rrCollider::RRVec2, rrCollider::RRVec3, rrCollider::RRVec4, rrVision::RRMatrix4x4
  \n primitives with basic mathematics
  \n simplifies inputs and outputs, adds type control
- rrVision::RRSceneStatistics
  \n new statistics of scene processing
  \n gives insight into processing when needed

CHANGES

- +2% faster on average
- more input data verifications during calculation
- \#define RR*_IMPORT no longer needed

*/

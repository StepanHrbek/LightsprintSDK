namespace rr
{

/**

\file doc.news
\brief Documentation only.

\page main_news What's new

\section news91 ------------------------------------ 2009.08.xx -------------------------------------

NEWS

- improved \ref main_gamebryo30 "Lightspeed integration"
  - bake is faster and uses less memory
  - supports lightmap resolution calculated from mapping, see new properties
    - LightsprintScene.LsPixelsPerWorldUnit
    - LightsprintMesh.LsResolutionFormula
    - LightsprintMesh.LsResolutionMultiplier
  - if environment color is not set (=is black), it does not multiply environment texture
  - GIScene.LightingFile is set automatically, if needed
  - if LightPCLObjectsAtRuntime && LightNonPCLObjectsAtRuntime, calculates indirect illumination only
  - relighting in UI menu (testing only)
  - renamed several properties
- small helper functions
  - RRMesh::getMappingDensity()
  - RRMatrix3x4::setIdentity()
  - LightsprintGL source code comes with boost::serialization support
  - RR_CLAMP and RR_CLAMPED macros (previously CLAMP, CLAMPED)

FIXED

- Visual C++ 2005 binaries did not run if Microsoft security updates were not installed

\section news90 ------------------------------------ 2009.08.15 -------------------------------------

NEWS

- improved \ref main_gamebryo30 "Lightspeed integration"
  - LightsprintModelLibrary added, new per-mesh and per-scene settings
  - supports directional lightmaps (radiosity normal maps)
  - supports environment (HDR or LDR texture, color..)
  - works with GI Package 2.0.1

\section news89 ------------------------------------ 2009.08.02 -------------------------------------

NEWS

- \ref main_gamebryo30 "Lightspeed integration (Gamebryo 3.0)" - testing version
- RRObject::getCustomData() added
  \n makes it possible to access format specific data via generic RRObject interface

\section news88 ------------------------------------ 2009.07.18 -------------------------------------

CHANGES

- additional parameter clipPlaneY in several rendering functions

FIXED

- realtime GI was incorrect in big scenes and in tiny windows

\section news87 ------------------------------------ 2009.06.29 -------------------------------------

NEWS

- faster realtime render (up to 10x higher fps in huge high poly scenes, 10% speedup in small scenes)
- 2x lower video memory footprint in high poly scenes

\section news86 ------------------------------------ 2009.06.19 -------------------------------------

CHANGES

- reduced number of dlls, all wxWidgets files are gone
- RRBuffer::setLoader() split into RRBuffer::setLoader() and RRBuffer::setSaver(),
  \n both return previous loader/saver
- source code licensee only:
  - precompiled wxWidgets removed from SDK, \ref obtaining_wxwidgets "build your own wxWidgets"
  - Runtime Library in all static configurations changed to DLL

\section news85 ------------------------------------ 2009.06.05 -------------------------------------

NEWS

- faster realtime render (up to 2x higher fps in Lightsmark)
- enhanced rr_gl::sceneViewer() and SceneViewer sample
  - new "Global illumination" menu adds capabilities, replaces "Realtime lighting" and "Static lighting" menus
  - new parameter releaseResources lets you exit faster without releasing stuff

CHANGES

- several members of rr_gl::SceneViewerState renamed or added to better cover new capabilities
- new parameter lightIndirectVersion in several rr_gl rendering function
  \n changing it only when illumination changes makes realtime render faster

\section news84 ------------------------------------ 2009.05.29 -------------------------------------

NEWS

- enhanced rr_gl::TextureRenderer
  - new parameter float gamma for gamma correction
  - parameters float color[4] changed to RRVec4 color (pass RRVec4(1) where you passed NULL)
- enhanced rr_gl::sceneViewer() and SceneViewer sample
  - help as overlay image
  - new menu items: render FPS
  - adjust contrast
  - render logo
  - render vignette effect
- RRMesh::getAABB() is much faster when called multiple times (results are cached in RRMesh)
- tone mapping can be configured for brighter or darker results
  \n see new parameter targetIntensity in rr_gl::ToneMapping::adjustOperator()

CHANGES

- rr_gl::Camera::setRangeDynamically() replaces rr_gl::Camera::setNearDynamically()
  \n new function sets both near and far

\section news83 ------------------------------------ 2009.05.16 -------------------------------------

NEWS

- Gamebryo integration includes new realtime GI example, run samples/BuildLightmaps/Gamebryo-Realtime-Cathedral.bat
- UE3 integration supports work with selected objects only
- improved scene import
  - improved diagnostics if VERIFY is defined (unwraps are checked, mesh numbers are reported thanks to RRMesh::checkConsistency() new parameter)
  - .obj loader reads also normals and uvs

CHANGES

- different 3ds object numbers
  \n previously, cameras and lights figured in RRObjects array as meshes with 0 triangles

\section news82 ------------------------------------ 2009.05.07 -------------------------------------

NEWS

- realistic realtime specular reflections
  - enabled in rr_gl::sceneViewer() and SceneViewer and BuildLightmaps samples
    \n default rr_gl::SceneViewerState::renderSpecular was changed to true
  - new RRDynamicSolver::updateBuffersForRealtimeGI()
    \n allocates and updates vertex buffers and reflection maps, structures used to pass computed GI to external renderers
  - new RRDynamicSolver::allocateBuffersForRealtimeGI()
    \n allocates vertex buffers and reflection maps, structures used to pass computed GI to external renderers

  <table border=0><tr align=top><td>
  \image html features/light-spot.jpg
  </td><td>
  \image html features/light-point.jpg
  </td><td>
  \image html features/light-dir.jpg
  </td></tr></table>

- new rr_gl::RendererOfScene::useRealtimeGI() function
  \n simplifies realtime GI rendering
  \n makes renderer allocate and update GI buffers automatically, using reasonable qualities and resolutions

CHANGES

- rr_gl::RendererOfScene::render() does not clear color buffer
  \n To fix existing code, clear also color buffer before
  rendering scene, change glClear(GL_DEPTH_BUFFER_BIT);
  to glClear(GL_DEPTH_BUFFER_BIT|GL_COLOR_BUFFER_BIT);

FIXED

- black spots in lightmaps lit by spotlights

\section news81 ------------------------------------ 2009.05.02 -------------------------------------

NEWS

- realtime GI from emissive surfaces
  - \ref calc_fireball supports emissive surfaces
    \n this makes Fireball complete, it calculates GI from all \ref inputs_light_sources in real-time
  - new RRDynamicSolver::setEmittance()
    \n streaming video to emissive map? Call this in every frame to update GI from updated emissive maps.
    \n emissiveMultiplier parameter lets you multiply emittance globally

  <table border=0><tr align=top><td>
  \image html features/emis1.jpg
  </td><td>
  \image html features/emis2.jpg
  </td></tr></table>

- improved 3ds import
  - imports face sidedness, specular color
  - if opacity map is the same as diffuse map, transparency is taken from alpha channel
- minor helpers
  - mini(), maxi(), normalizeSafe() added to RRVec2, RRVec3, RRVec4 
  - RR_BIG_ENDIAN defined on big endian platforms

CHANGES

- default realtime GI solver in rr_gl::sceneViewer(), SceneViewer and BuildLightmaps samples changed to Fireball
  \n Fireball makes rendering faster and GI is complete (includes skylight)
  \n when opening scene for first time, Fireball is built automatically at medium quality 350
  \n use menu Realtime lighting / Rebuild fireball to change quality

FIXED

- realtime renderer incorrectly illuminated 2-sided faces
- nearly opaque materials were handled as fully opaque, so light did not get through very dark glass

\section news80 ------------------------------------ 2009.04.20 -------------------------------------

NEWS

- realtime GI from skylight
  - no API changes, build Fireball and set sky as usual (RRDynamicSolver::buildFireball(), RRDynamicSolver::setEnvironment()),
    but this time, all static and dynamic objects will be illuminated also by sky
  - infinite light bounces
  - fully dynamic, change sky as often as you wish

  <table border=0><tr align=top><td>
  \image html features/environment1.jpg
  </td><td>
  \image html features/environment2.jpg
  </td></tr></table>

- new per-vertex illumination smoothing mode
  - RRDynamicSolver::SmoothingParameters::maxSmoothAngle default _is_ -0.01
    \n this smooths per-vertex illumination where vertex normals are similar,
    ignoring RRDynamicSolver::SmoothingParameters::minFeatureSize.
  - RRDynamicSolver::SmoothingParameters::maxSmoothAngle default _was_ 0.33,
    \n this smoothed illumination where face normals were similar,
    with additional blur specified by RRDynamicSolver::SmoothingParameters::minFeatureSize.
  - new parameter in RRMesh::createOptimizedVertices() and RRObject::createMultiObject()
    \n makes it possible to stitch only vertices with similar normals
- improved rr_gl::sceneViewer(), SceneViewer sample, BuildLightmaps tools
  - new Environment / Load skybox... menu item
- improved cube map loading
  - new RRBuffer::loadCube() and RRBuffer::reloadCube()
    \n load cubemap specified by single filename, eventual filenames of other 5 sides are guessed
- new math macros prefixed RR_ added to RRMath.h
- new utility functions RRDynamicSolver::containsLightSource() and RRDynamicSolver::containsRealtimeGILightSource()

CHANGES

- default per-vertex smoothing technique specified by RRDynamicSolver::SmoothingParameters::maxSmoothAngle was changed, see above
- loading cubemaps made of 6 files via RRBuffer::load() works with default parameters flipV and flipH = false,
  previously these had to be true

\section news79 ------------------------------------ 2009.04.15 -------------------------------------

CHANGES

- RRMaterial moved to new header RRMaterial.h
  \n (no changes to old code needed)

FIXES

- under specific circumstances, generic getPointMaterial() was called instead of custom one

\section news78 ------------------------------------ 2009.04.03 -------------------------------------

NEWS

- improved Collada import, workarounds for Google SketchUp bugs
- rr_gl::sceneViewer() additional parameter makes it possible to specify skybox by filename

FIXES

- under rare circumstances, random pixels in lightmaps received random colors

\section news77 ------------------------------------ 2009.03.25 -------------------------------------

NEWS

- full Visual Studio 2005 x64 support
- improved rr_gl::sceneViewer()
  - new parameter makes it possible to view scene from file rather than from solver in memory
  - new File menu with Open scene, Save screenshot
- new texture manipulation functions
  - RRBuffer::createCopy()
  - RRBuffer::setFormat()
  - RRBuffer::setFormatFloats()
  - RRBuffer::invert()
  - RRBuffer::multiplyAdd() extends old to RRBuffer::multiply()
  - RRMaterial::Property::multiplyAdd() extends old RRMaterial::Property::multiply()
- improved scene import
  - rr_io::ImportScene with fixed set of formats replaced by extensible RRScene
  - parameter stripPaths was removed, all loaders load textures from full paths as if stripPaths=false,
    but if it fails, second attempt is made automatically in scene directory as if stripPaths=true
  - RRScene::getSupportedFormats()
  - improved .3ds import (transparency, opacity map, self illum map...)
- improved transparency realtime rendering

CHANGES

- rr_io::setImageLoader() replaced by rr_io::registerLoaders()
  \n new function registers also 3d scene loaders that did not need registration before
- RRObjects moved from RRDynamicSolver.h to RRObject.h

FIXES

- MovingSun sample lighting was incorrect

\section news76 ------------------------------------ 2009.03.14 -------------------------------------

NEWS

- Improved handling of overlapping triangles.
  \n It's still recommended to avoid them, but if you must use them, chances are that precomputed lightmaps will be ok.
  \n Previously \ref main_ue3 "UE3" skylight created dark strips where terrain segments overlap.
- tangent space vectors are displayed in rr_gl::sceneViewer() with helpers enabled

FIXES

- UE3 materials had swapped R and B (incorrect color bleeding)
- one of cascaded shadow maps was not updated (incorrect realtime sunlight shadows)

\section news75 ------------------------------------ 2009.02.23 -------------------------------------

NEWS

- \ref main_ue3 "UE3 integration" produces higher quality lightmaps in proximity of SpeedTree meshes
  (fixed per-pixel material detection)

\section news74 ------------------------------------ 2009.02.19 -------------------------------------

NEWS

- emissive multiplier, lets you boost or reduce emissivity in materials
  - new parameter "emissivemultiplier=1" in BuildLightmaps tool
  - new parameter in rr_io::ImportSceneRRLight::ImportSceneRRLight()
  - adapters call new RRMaterial::Property::multiply() to apply emissive multiplier

\section news73 ------------------------------------ 2009.02.06 -------------------------------------

NEWS

- RRLight::rtProjectedTextureFilename
  \n lets you specify texture projected by light

CHANGES

- rr_gl::RealtimeLight::lightDirectMap replaced by
  - rr_gl::RealtimeLight::setProjectedTexture()
  - rr_gl::RealtimeLight::getProjectedTexture()
- RRLight::createMutableLight() replaced by new RRLight()
  \n RRLight is now fully implemented, previously RRLight::getIrradiance() was pure/abstract

\section news72 ------------------------------------ 2009.01.10 -------------------------------------

NEWS

- sample BuildLightmaps supports setting sky from commandline (HDR or LDR texture or 6 textures or flat color or upper and lower hemisphere color)
- improved realtime render of float textures
  - uses floats where available, falls back to 8bit on ancient GPUs
  - HDR skyboxes in physical scale are converted to sRGB in shader

FIXED

- Gamebryo adapter allocated too much memory and crashed in some scenes

\section news71 ------------------------------------ 2009.01.08 -------------------------------------

NEWS

- \ref main_ue3 "UE3 integration" produces higher quality lightmaps: now also SpeedTree materials are evaluated per-pixel

CHANGES

- default behaviour of back side of one sided material was changed
  \n Previously, photons that hit back side of one-sided face were removed from simulation. Windows had to be made of 2-sided faces to transmit light in both directions.
  \n Now photons are allowed to go through back side and refract according to material transmittance and refraction index. Windows transmit light in both directions even if they are made of 1-sided faces.

\section news70 ------------------------------------ 2009.01.07 -------------------------------------

NEWS

- \ref main_ue3 "UE3 integration" produces higher quality lightmaps: staticmesh and bspsurface materials are evaluated per-pixel
- 2x faster windowed reporter (RRReporter::createWindowedReporter())
  \n (real world example: building preview quality lightmaps in scene with 11000 meshes and windowed reporter took 600s, now 500s)

CHANGES

- rr_gl::sceneViewer() second parameter removed (bool createWindow)
  \n window is always created, false was ignored since sceneViewer rewrite in 2008.12.8

\section news69 ------------------------------------ 2008.12.19 -------------------------------------

NEWS

- BuildLightmaps tool lets you change lightmap resolution, format etc for individual objects
- new RRObjects::recommendLayerParameters() recommends lightmap resolution, filename etc

CHANGES

- RRObjects::LayerParameters replaces RRIlluminatedObject::LayerParameters (added in previous release)
- RRObjects::createLayer() was removed (added in previous release),
  \n new RRObjects::recommendLayerParameters() is more flexible

\section news68 ------------------------------------ 2008.12.8 -------------------------------------

NEWS

- \ref main_gamebryo26 "Gamebryo integration"
- new \ref samples_offline "BuildLightmaps tool"
- new GUI in rr_gl::sceneViewer()
  - all light properties editable in new Light Properties window
  - context menu changed to menu bar
  - LightsprintGL does not depend on glut (remains in SDK, because samples use it)
  - LightsprintGL depends on wxWidgets (precompiled Windows version added to SDK)
  - minor other changes in controls
- simplified mesh adapters (RRMesh implementations in LightsprintIO reduced by 30%)
  - RRChanneledData removed
  - RRMesh::getTriangleMapping() extended to support multiple texcoord channels
  - RRMaterial::lightmapTexcoord added
- point materials API simplified, point materials faster, used more often
  - for point materials, you need only to set material textures and call RRMaterial::updateColorsFromTextures(),
    everything else is handled by default implementation of RRObject::getPointMaterial()
  - custom RRObject::getPointMaterial() implementations removed from adapters
  - RRMaterial::minimalQualityForPointMaterials replaces RRSideBits::pointDetails (no need to touch it)
  - Point materials in Collada and Quake3 scenes are used more often. For identical quality settings,
    new solver produces illumination of slightly higher quality in slightly longer time.
- RRMaterial::specularReflectance extended to support colors and textures
- realtime lights more flexible
  - rr_gl::RealtimeLight always contains RRLight
  - it's always legal to edit RRLight properties as long as you call rr_gl::RealtimeLight::updateAfterRRLightChanges() later
  - minor other changes in rr_gl::RealtimeLight
- RRObjects made more flexible
  - RRObjects::createLayer() creates empty buffers for whole layer
  - RRObjects::loadLayer() replaces RRObjects::loadIllumination()
  - RRObjects::saveLayer() replaces RRObjects::saveIllumination()

CHANGES

- sample AmbientOcclusion removed, replaced by BuildLightmaps
- samples/samples.vs200x.sln removed, replaced by src/Lightsprint.vs200x.sln

\section news67 ------------------------------------ 2008.11.16 -------------------------------------

NEWS

- distance attenuation model POLYNOMIAL was extended to support Gamebryo,
  \n RRLight::polynom extended from RRVec3 to RRVec4

\section news66 ------------------------------------ 2008.11.2 -------------------------------------

NEWS

- log window has lots of new features
  \n (no API changes, it's still created by RRReporter::createWindowedReporter())
- doesn't rely on doubles having double precision
  \n so if you use D3DCREATE_FPU_PRESERVE because of Lightsprint, feel free to remove it
- RRLight::createMutableLight()

CHANGES

- rr_gl::Camera::dir changed from RRVec4 to RRVec3, fourth element was not used
- RRMesh::Plane removed, RRMesh::getTrianglePlane() second parameter changed to RRVec4
- RRRay::hitPlane changed from RRVec3p to RRVec4

\section news65 ------------------------------------ 2008.10.4 -------------------------------------

NEWS

- parallel radiosity, offline lightmap build 5-50% faster
- Visual Studio 2005 x64 support (partial)

*/

};

namespace rr
{

/**

\file doc.news
\brief Documentation only.

\page main_news What's new

\section news101 ------------------------------------ 2010.05.01 -------------------------------------

NEWS

- enhanced collada import (workarounds for know bugs in exporters etc)
- enhanced SceneViewer (grid options in Scene properties)

CHANGES

- if Visual Studio project needs specific DXSDK version, it explicitly specifies which one
  - makes it possible to use different DXSDK versions in different projects, paths are specified in .vcproj
  - should work without any changes on your side
  - note: only Gamebryo integration needs DXSDK

\section news100 ------------------------------------ 2010.04.11 -------------------------------------

NEWS

- saving 3d scenes
  - scene viewer "File / Save scene" and "Save scene as..." added
  - RRScene::save() added
  - RRScene::getSupportedExtensions() split into RRScene::getSupportedLoaderExtensions() and RRScene::getSupportedSaverExtensions()
  - RRScene::registerSaver() added
  - RRScene::Saver added
- new scene formats (full list of \ref supported_formats)
  - Lightsprint .rr3, reading, writing
    \n This is first time we introduce new format, after supporting ~35 existing scene formats.
    Advantages: 50-200x faster load, 2-6x smaller than other formats.
    You don't have to use .rr3, it's just an option.
  - trueSpace .cob, reading
- state of the art Collada support
  - new robust OpenCollada based loader, fully contained withing LightsprintIO library, no additional headers or libraries
  - Collada 1.5.0 support (in addition to 1.4.x)
  - Google SketchUp support (SketchUp exports Collada with unusual instancig technique, other loaders don't support)
  - two other Collada loaders (FCollada, Assimp) still available for reference
  - FCollada disabled by default, executables don't depend on fcollada.dll/so
- editing 3d scenes
  - you can freely edit RRScene objects, lights and environment (they were read-only before)
- enhanced SceneViewer
  - "Material properties" shows texture miniatures and colors
  - menu "Render" moved to "Scene properties"
  - workspaces are persistent, saved to per-user config file

CHANGES

- when using RRScene
  - change getObjects() to objects
  - change getLights() to lights
  - change getEnvironment() to environment
  - you can edit objects, lights, environment, while getXxx() were for reading only
- when implementing RRScene
  - change "objects =" to "protectedObjects ="
  - change "lights =" to "protectedLights ="
  - remove environment and getEnvironment() from your implementation, environment is now in RRScene
- moved from RRObjects to RRObject
  - RRObject::LayerParameters
  - RRObject::recommendLayerParameters()

\section news99 ------------------------------------ 2010.02.17 -------------------------------------

NEWS

- <b>video</b>
  - materials can play video in diffuse, emittance or transparency slot, GI updates in realtime
    <table border=0><tr align=top><td>
    \image html emissive_video_1.jpg video in emissive slot
    </td><td>
    \image html emissive_video_2.jpg (setting it takes 4 clicks in SceneViewer)
    </td></tr></table>
  - spotlights can project video, GI updates in realtime
    \image html samples/RealtimeRadiosity_3.jpg projected video in RealtimeRadiosity sample
  - plays with sound
  - total support throughout Lightsprint SDK, use foo.avi instead of foo.jpg
    - in any 3d scene file (collada, 3ds, obj...)
    - in Scene Viewer's light properties and material properties
    - in your code
  - RRBuffer extended to let you control video
    - RRBuffer::play()
    - RRBuffer::stop()
    - RRBuffer::pause()
    - RRBuffer::update()
    - RRBuffer::getDuration()
  - full source code in <code>src/LightsprintIO/ImportDirectShow</code>
  - serves also as an example of writing custom RRBuffer
  - supported in Windows only
  - spacebar in SceneViewer pauses/resumes videos
- \ref main_gamebryo3 "Lightspeed 3.1 integration" adds
  - Direct light multiplier
  - Indirect light multiplier
  - Emissive multiplier (newly also in LightsprintMesh)
  <table border=0><tr align=top><td>
  \image html Toolbench-LightsprintScene.png
  </td><td>
  \image html Toolbench-LightsprintMesh.png
  </td></tr></table>
  - lightmaps are not built for plain Mesh entities, make your entity PCLMesh or LightsprintMesh to get lightmap
- added rr_gl::RealtimeLight::changesInProjectedTextureAffectGI,
  \n makes it easier to manage GI quality when editing projected texture in realtime
- added RRDynamicSolver::getAllBuffers(),
  \n helper for gathering all texture filenames, memory statistics etc
- added BF_BGR format,
  \n for DirectShow interoperability

CHANGES

- RRLight::rtProjectedTexture replaces RRLight::rtProjectedTextureFilename and RealtimeLight::setProjectedTexture(),
  \n simplifies API
- RRBuffer::Loader and RRBuffer::setLoader() split in two,
  - RRBuffer::Loader and RRBuffer::setLoader() sets implementation of RRBuffer::load()
  - RRBuffer::Reloader and RRBuffer::setReloader sets implementation of RRBuffer::reload()
  \n adds flexibility necessary for video importers
- const removed from environment in RRScene::getEnvironment(), RRDynamicSolver::getEnvironment(), RRDynamicSolver::setEnvironment(),
  \n makes it easier to manipulate environment in realtime

\section news98 ------------------------------------ 2010.01.21 -------------------------------------

NEWS

- enhanced SceneViewer
  - added File / Save enhanced screenshot
  - added Light properties / Shadow samples

CHANGES

- rr_gl::RealtimeLight::setNumShadowSamples() replaces rr_gl::RealtimeLight::softShadowsAllowed

\section news97 ------------------------------------ 2010.01.10 -------------------------------------

CHANGES

- removed RRDynamicSolver::SmoothingParameters::minFeatureSize

\section news96 ------------------------------------ 2010.01.03 -------------------------------------

NEWS

- <b>support added for 30 scene formats</b>
  - see full list of \ref supported_formats
  \image html SceneViewer_3.jpg
- RRBuffer::load() is faster and saves memory when loading the same image multiple times
  - all images are transparently cached
  - removed old caching from Collada adapter
  - added RRBuffer::createReference()
  - added RRBuffer::getReferenceCount()
- \ref main_vs "Visual Studio integration"
- improved diagnostics
  - added RRObjects::checkConsistency()
  - added RRObject::checkConsistency()
  - modified RRMesh::checkConsistency() parameters
  - \ref main_gamebryo3 integration always checks consistency before bake

CHANGES

- RRMaterial changes
  - RRMaterial owns textures, it deletes them in destructor, custom adapters must stop deleting them to avoid double delete
  - RRPointMaterial added, it is material that does not own/does not delete textures
  - custom getPointMaterial() implementations must change output type from RRMaterial to RRPointMaterial
  - RRMaterial is noncopyable, copying should be avoided, use RRMaterial::copyFrom() if necessary
- RRObject::createWorldSpaceObject() removed, let us know if you need it
- RRScene::registerLoader() expects extensions in "*.abc;*.cde" format rather than old "abc"

\section news95 ------------------------------------ 2010 beta (2009.12.11) -------------------------------------

NEWS

- <b>\ref main_gamebryo3 "Lightspeed 3.1 integration"</b>
  - new bake target Compressed Texture (6x smaller, DXT1 compression)
- <b>manipulate everything in realtime</b>, scene API extended from read-only to read-write
  - mesh indices and vertices
    - RRMeshArrays added, lets you edit index+vertex arrays
    - RRMesh::createArrays() added, creates editable copy of mesh
  - object materials
    - RRObject::faceGroups added,
      \n your RRObject implementation must fill it
    - RRObject::getTriangleMaterial() modified
      - default implementation added, in most cases you can delete yours
      - returned material is not const so it can be edited
    - RRObject::updateFacegroupsFromTriangleMaterials() added
      \n helps fill faceGroups
  - object transformation
    - RRObject::setWorldMatrix() added
    - RRObject::getWorldMatrix() default implementation improved, delete yours, just call setWorldMatrix() once
    - RRObject::getWorldMatrix() changed to const, delete or fix your implementation
    - RRObject::getWorldMatrixRef() added
  - object's collider and mesh
    - RRObject::setCollider() added
    - RRObject::getCollider() default implementation added, you can delete yours, just call setCollider() once
  - works for all 40 supported formats
- <b>dynamic object support</b> (completed)
  - RRDynamicSolver::setDynamicObjects() added
  - RRDynamicSolver::getDynamicObjects() added
  - everything works as expected, simply set and manipulate dynamic objects, they render, affect illumination etc
- <b>new realtime renderer</b>
  - faster, using less memory (in most cases)
  - automatically renders also dynamic objects (but it's still possible to use custom renderer as in RealtimeRadiosity sample)
  - you can change transformations, materials and textures on the fly, changes propagate to GPU automatically
  - you can change geometry in RRMeshArrays on the fly, changes propagate to GPU automatically
  - materials with smooth blending and materials with 1bit alpha can be combined
  - static and dynamic objects sort and blend correctly if blending is used
  - removed RendererOfRRObject, no longer necessary
  - no longer necessary to call rr_gl::Texture::reset()
- <b>enhanced SceneViewer</b>
  - added object properties window
  - added material properties window
  \image html SceneViewer_2.jpg
- <b>rr_gl::RRDynamicSolverGL completed</b>
  - can be used for realtime rendering out of the box, does not contain pure functions
  - rr_gl::RRDynamicSolverGL::renderScene() implemented, added parameters
- compressed buffer formats RRBufferFormat::BF_DXT1, BF_DXT3, BF_DXT5
- all important classes have editable names
  - added RRString
  - added RRBuffer::filename
  - added RRLight::name
  - changed RRLight::rtProjectedTextureFilename to RRString from char* (delete eventual _strdup() and free() from your custom adapter)
  - changed RRMaterial::name to RRString from const char* (delete eventual _strdup() and free() from your custom adapter)
  - added RRObject::name
  - removed RRObject::getCustomData("const char* objectName"), use RRObject::name
- added small helpers
  - RRMatrix3x4::isIdentity()
  - RRMaterial::needsBlending()
  - RRVector::resize()
  - RRBuffer::version, updated to solver->getSolutionVersion() each time buffer is updated from solver
- <b>greatly simplified samples</b>
  - new features listed above made source code of realtime rendering samples considerably shorter (e.g. RealtimeLights roughly 5x shorter)

CHANGES

- const removed from RRObject::getTriangleMaterial(), remove const from your implementations or delete your implementation.
  \n This change makes returned materials writeable, they can be modified.
- simplified scene adapters
  - worldMatrix is stored in base RRObject, remove worldMatrix and getWorldMatrix() from your derived classes
  - illumination is stored in base RRObject, remove illumination and getIllumination() from your derived classes
  - objects and lights are stored in RRScene, remove your objects/lights variables and getLights()/getObjects() functions and objects/lights deleting from your derived classes
  - RRScene::getObjects() and RRScene::getLights() return reference, user doesn't have to check for NULL
- cleanup in RRDynamicSolver
  - removed RRIlluminatedObject
    - RRObjects is now collection of RRObject
    - illumination was moved to RRObject::illumination
    - scene adapters no longer allocate/delete illumination -> simpler adapters
    - change objects[i].object to objects[i]
    - change objects[i].illumination-> to objects[i]->illumination.
  - removed getNumObjects(), use getStaticObjects().size()
  - removed getObject(i), use getStaticObjects()[i] and make sure i is not out of range, new version checks it only in debug
  - removed getIllumination(i), use getStaticObjects()[i]->illumination and make sure i is not out of range
  - extended RRDynamicSolver::allocateBuffersForRealtimeGI(), new parameters, you can use also new RRObjects::allocateBuffersForRealtimeGI()
- modified parameters of RRObject::createMultiObject(), array+length replaced by vector
- simplified rr_gl::RendererOfScene
  - reduced to single simple function
  - renders (and optionally updates) only illumination in existing buffers (vertex buffers, textures),
    you have to allocate these buffers first (using e.g. RRDynamicSolver::allocateBuffersForRealtimeGI()).
- renamed RRBuffer::getMemoryOccupied() to RRBuffer::getBufferBytes(), returns pure buffer data size without several bytes of fixed overhead
- removed rr_gl::RRDynamicSolverGL::getMaterialsInStaticScene(), no longer needed
- removed rr_gl::UberProgramSetup::recommendMaterialSetup(), use rr_gl::UberProgramSetup::enableAllMaterials()
- renamed rr_gl::UberProgramSetup::reduceMaterialSetup() to rr_gl::UberProgramSetup::reduceMaterials()
- removed RRObjectWithPhysicalMaterials

KNOWN REGRESSIONS

- old automatic unwrap is no longer working, it will be replaced by new higher quality unwrap
- realtime renderer ignores uv channel numbers above 100, let us know if you need them

\section news94 ------------------------------------ 2009.10.10 -------------------------------------

NEWS

- internal hashing functions exposed
  - class RRHash and include/Lightsprint/RRHash.h added
  - RRObject::getHash() added
  - RRMesh::getHash() modified to return RRHash

CHANGES

- additional parameter in RRDynamicSolver::loadFireball()

\section news93 ------------------------------------ 2009.10.06 -------------------------------------

NEWS

- enhanced rr_gl::sceneViewer() and SceneViewer sample
   - added light icons
   - added scene properties window
- improved water rendering in rr_gl::Water
   - see new parameters in rr_gl::Water::Water(), rr_gl::Water::render()

FIXED

- wrong light directions in Lightspeed integration

\section news92 ------------------------------------ 2009.09.24 -------------------------------------

NEWS

- \ref main_gamebryo3 "Lightspeed integration" comes with preconfigured sample scenes
  <table border=0><tr align=top><td>
  \image html Toolbench-Cathedral.jpg
  </td><td>
  \image html Toolbench-Cornell.jpg
  </td></tr></table>
- enhanced rr_gl::sceneViewer() and SceneViewer sample
  - added scene tree window
  - all windows dockable
  \image html SceneViewer_1.jpg
- small RRBuffer changes
  - RRBuffer::flip() added
  - RRBuffer::load() flip parameters removed, use flip() instead
  - RRBuffer::SaveParameters added with jpeg quality, used as parameter in RRBuffer::save()

\section news91 ------------------------------------ 2009.08.30 -------------------------------------

NEWS

- improved \ref main_gamebryo3 "Lightspeed integration"
  - bake is faster and uses less memory
  - supports lightmap resolution calculated from mapping, see new properties
    - LightsprintScene.LsPixelsPerWorldUnit
    - LightsprintMesh.LsResolutionMode
    - LightsprintMesh.LsResolutionMultiplier
  - GIScene.LightingFile is set automatically, if needed
  - if LightPCLObjectsAtRuntime && LightNonPCLObjectsAtRuntime, calculates indirect illumination only
  - relighting in UI menu (testing only)

  <table border=0><tr align=top><td>
  \image html Toolbench-LightsprintScene.png
  </td><td>
  \image html Toolbench-LightsprintMesh.png
  </td></tr></table>

- small helper functions
  - RRMesh::getMappingDensity()
  - RRMatrix3x4::setIdentity()
  - LightsprintGL source code comes with boost::serialization support

CHANGES

- Gamebryo
  - if environment color is not set (=is black), it does not multiply environment texture
  - several properties renamed
- RR_ prefix added to macros that did not have it yet (RR_CLAMP, RR_CLAMPED, RR_FLOAT2BYTE, RR_BYTE2FLOAT, RR_LIMITED_TIMES)

FIXED

- Visual C++ 2005 binaries did not run if Microsoft security updates were not installed

\section news90 ------------------------------------ 2009.08.15 -------------------------------------

NEWS

- improved \ref main_gamebryo3 "Lightspeed integration"
  - LightsprintModelLibrary added, new per-mesh and per-scene settings
  - supports directional lightmaps (radiosity normal maps)
  - supports environment (HDR or LDR texture, color..)
  - works with GI Package 2.0.1

\section news89 ------------------------------------ 2009.08.02 -------------------------------------

NEWS

- \ref main_gamebryo3 "Lightspeed integration (Gamebryo 3.0)" - testing version
- RRObject::getCustomData() added
  \n makes it possible to access format specific data via generic RRObject interface

\section news88 ------------------------------------ 2009.07.18 -------------------------------------

CHANGES

- additional parameter clipPlaneY in several rendering functions

FIXED

- realtime GI was incorrect in big scenes and in tiny windows

\section news87 ------------------------------------ 2009.06.29 -------------------------------------

NEWS

- faster realtime render (up to 10x higher fps in huge high poly scenes, 10% speedup in small scenes)
- 2x lower video memory footprint in high poly scenes

\section news86 ------------------------------------ 2009.06.19 -------------------------------------

CHANGES

- reduced number of dlls, all wxWidgets files are gone
- RRBuffer::setLoader() split into RRBuffer::setLoader() and RRBuffer::setSaver(),
  \n both return previous loader/saver
- source code licensee only:
  - precompiled wxWidgets removed from SDK, \ref obtaining_wxwidgets "build your own wxWidgets"
  - Runtime Library in all static configurations changed to DLL

\section news85 ------------------------------------ 2009.06.05 -------------------------------------

NEWS

- faster realtime render (up to 2x higher fps in Lightsmark)
- enhanced rr_gl::sceneViewer() and SceneViewer sample
  - new "Global illumination" menu adds capabilities, replaces "Realtime lighting" and "Static lighting" menus
  - new parameter releaseResources lets you exit faster without releasing stuff

CHANGES

- several members of rr_gl::SceneViewerState renamed or added to better cover new capabilities
- new parameter lightIndirectVersion in several rr_gl rendering function
  \n changing it only when illumination changes makes realtime render faster

\section news84 ------------------------------------ 2009.05.29 -------------------------------------

NEWS

- enhanced rr_gl::TextureRenderer
  - new parameter float gamma for gamma correction
  - parameters float color[4] changed to RRVec4 color (pass RRVec4(1) where you passed NULL)
- enhanced rr_gl::sceneViewer() and SceneViewer sample
  - help as overlay image
  - new menu items: render FPS
  - adjust contrast
  - render logo
  - render vignette effect
- RRMesh::getAABB() is much faster when called multiple times (results are cached in RRMesh)
- tone mapping can be configured for brighter or darker results
  \n see new parameter targetIntensity in rr_gl::ToneMapping::adjustOperator()

CHANGES

- rr_gl::Camera::setRangeDynamically() replaces rr_gl::Camera::setNearDynamically()
  \n new function sets both near and far

\section news83 ------------------------------------ 2009.05.16 -------------------------------------

NEWS

- Gamebryo integration includes new realtime GI example, run samples/BuildLightmaps/Gamebryo-Realtime-Cathedral.bat
- UE3 integration supports work with selected objects only
- improved scene import
  - improved diagnostics if VERIFY is defined (unwraps are checked, mesh numbers are reported thanks to RRMesh::checkConsistency() new parameter)
  - .obj loader reads also normals and uvs

CHANGES

- different 3ds object numbers
  \n previously, cameras and lights figured in RRObjects array as meshes with 0 triangles

\section news82 ------------------------------------ 2009.05.07 -------------------------------------

NEWS

- realistic realtime specular reflections
  - enabled in rr_gl::sceneViewer() and SceneViewer and BuildLightmaps samples
    \n default rr_gl::SceneViewerState::renderSpecular was changed to true
  - new RRDynamicSolver::updateBuffersForRealtimeGI()
    \n allocates and updates vertex buffers and reflection maps, structures used to pass computed GI to external renderers
  - new RRDynamicSolver::allocateBuffersForRealtimeGI()
    \n allocates vertex buffers and reflection maps, structures used to pass computed GI to external renderers

  <table border=0><tr align=top><td>
  \image html features/light-spot.jpg
  </td><td>
  \image html features/light-point.jpg
  </td><td>
  \image html features/light-dir.jpg
  </td></tr></table>

- new rr_gl::RendererOfScene::useRealtimeGI() function
  \n simplifies realtime GI rendering
  \n makes renderer allocate and update GI buffers automatically, using reasonable qualities and resolutions

CHANGES

- rr_gl::RendererOfScene::render() does not clear color buffer
  \n To fix existing code, clear also color buffer before
  rendering scene, change glClear(GL_DEPTH_BUFFER_BIT);
  to glClear(GL_DEPTH_BUFFER_BIT|GL_COLOR_BUFFER_BIT);

FIXED

- black spots in lightmaps lit by spotlights

\section news81 ------------------------------------ 2009.05.02 -------------------------------------

NEWS

- realtime GI from emissive surfaces
  - \ref calc_fireball supports emissive surfaces
    \n this makes Fireball complete, it calculates GI from all \ref inputs_light_sources in real-time
  - new RRDynamicSolver::setEmittance()
    \n streaming video to emissive map? Call this in every frame to update GI from updated emissive maps.
    \n emissiveMultiplier parameter lets you multiply emittance globally

  <table border=0><tr align=top><td>
  \image html features/emis1.jpg
  </td><td>
  \image html features/emis2.jpg
  </td></tr></table>

- improved 3ds import
  - imports face sidedness, specular color
  - if opacity map is the same as diffuse map, transparency is taken from alpha channel
- minor helpers
  - mini(), maxi(), normalizeSafe() added to RRVec2, RRVec3, RRVec4 
  - RR_BIG_ENDIAN defined on big endian platforms

CHANGES

- default realtime GI solver in rr_gl::sceneViewer(), SceneViewer and BuildLightmaps samples changed to Fireball
  \n Fireball makes rendering faster and GI is complete (includes skylight)
  \n when opening scene for first time, Fireball is built automatically at medium quality 350
  \n use menu Realtime lighting / Rebuild fireball to change quality

FIXED

- realtime renderer incorrectly illuminated 2-sided faces
- nearly opaque materials were handled as fully opaque, so light did not get through very dark glass

\section news80 ------------------------------------ 2009.04.20 -------------------------------------

NEWS

- realtime GI from skylight
  - no API changes, build Fireball and set sky as usual (RRDynamicSolver::buildFireball(), RRDynamicSolver::setEnvironment()),
    but this time, all static and dynamic objects will be illuminated also by sky
  - infinite light bounces
  - fully dynamic, change sky as often as you wish

  <table border=0><tr align=top><td>
  \image html features/environment1.jpg
  </td><td>
  \image html features/environment2.jpg
  </td></tr></table>

- new per-vertex illumination smoothing mode
  - RRDynamicSolver::SmoothingParameters::maxSmoothAngle default _is_ -0.01
    \n this smooths per-vertex illumination where vertex normals are similar,
    ignoring RRDynamicSolver::SmoothingParameters::minFeatureSize.
  - RRDynamicSolver::SmoothingParameters::maxSmoothAngle default _was_ 0.33,
    \n this smoothed illumination where face normals were similar,
    with additional blur specified by RRDynamicSolver::SmoothingParameters::minFeatureSize.
  - new parameter in RRMesh::createOptimizedVertices() and RRObject::createMultiObject()
    \n makes it possible to stitch only vertices with similar normals
- improved rr_gl::sceneViewer(), SceneViewer sample, BuildLightmaps tools
  - new Environment / Load skybox... menu item
- improved cube map loading
  - new RRBuffer::loadCube() and RRBuffer::reloadCube()
    \n load cubemap specified by single filename, eventual filenames of other 5 sides are guessed
- new math macros prefixed RR_ added to RRMath.h
- new utility functions RRDynamicSolver::containsLightSource() and RRDynamicSolver::containsRealtimeGILightSource()

CHANGES

- default per-vertex smoothing technique specified by RRDynamicSolver::SmoothingParameters::maxSmoothAngle was changed, see above
- loading cubemaps made of 6 files via RRBuffer::load() works with default parameters flipV and flipH = false,
  previously these had to be true

*/

};

namespace rr
{

/**

\file doc.news
\brief Documentation only.

\page main_news What's new

\section news120 ------------------------------------ 2011.04.xx -------------------------------------

NEWS

- improved specular reflection
  - Phong, Blinn-Phong, Torrance-Sparrow, Blinn-Torrance-Sparrow
  - RRMaterial::specularModel added
  - RRMaterial::specularShininess added, as a parameter for models above
- improved realtime renderer
  - supports all specular reflection models
  - supports spotlight exponent (RRLight::spotExponent)
  - more detailed sun shadows
  - advanced materials and lighting available also on low end GPUs
  - Program::sendTexture() added, dynamically allocates texture units
- improved scene viewer
  - Material properies/Specular/Model
  - Material properies/Specular/Shininess,roughness
  - User preferences/Debugging

CHANGES

- all third party headers moved from include to include/Windows
  to prevent collisions on other platforms

\section news119 ------------------------------------ 2011.04.01 -------------------------------------

NEWS

- <b>sRGB correct realtime rendering</b>
  - new sRGB correct path is more accurate, bit slower, requires OpenGL 3.0 or 2.x with extensions
  - old path stays unchanged, works fine with OpenGL 2.0
  - srgbCorrect parameter added to several rendering functions
    \n (if you reimplemented virtual renderScene(), add srgbCorrect parameter to your version)

  <table border=0><tr align=top><td>
  \image html features/srgb_correct.jpg sRGB correct, spotlight is visible only in shadow
  </td><td>
  \image html features/srgb_incorrect.jpg sRGB incorrect, spotlight is visible even in sunlight
  </td></tr></table>

- enhanced scene viewer
  - Scene properties/GI quality/sRGB correct
  - Scene properties/Environment/Speed
  - User preferences/Tooltips
  - enhanced color properties (color picker, main spin buttons for brightness)
  - pgup/pgdn = movement in world up direction (q/z = movement in local up direction)
  - pointlights move in camera directions

\section news118 ------------------------------------ 2011.03.17 -------------------------------------

NEWS

- enhanced realtime shadows from Sun
- enhanced scene viewer
  - Object properties/Materials
  - Object properties/Scale
- enhanced BuildLightmaps tool, new parameters
  - smoothing=
  - brightness=
  - contrast=
- enhanced RRMatrix4x3
  - RRMatrix3x4::getScale() added
  - RRMatrix3x4::setScale() added
  - getUniformScale() removed, use getScale().abs().avg()

CHANGES

- for source code licensee only: updated to boost 1.46
- one parameter added to all RRFileLocator::setXxx() functions
  \n to support multiple libraries, multiple parents etc

\section news117 ------------------------------------ 2011.02.21 -------------------------------------

NEWS

- enhanced import
  - added RRFileLocator (lets you exactly specify where to look for files, textures)
  - added RRFileLocator* parameter to several import functions (flexibility added, use NULL for standard texture locations)
  - RRBuffer::Loader replaces old RRBuffer::Loader and RRBuffer::Reloader (simplification)
  - RRBuffer::registerLoader() replaces RRBuffer::setLoader() and RRBuffer::setReloader() (simplification)
  - RRBuffer::registerSaver() replaces RRBuffer::setSaver() (lets you have multiple savers)
  - RRBuffer::reloadCube() removed, use RRBuffer::reload()
  - removed file location logic from all importers (simplification, handled by RRFileLocator)
- enhanced reporting
  - messages are passed to all created reporters
  - RRReporter::setReporter() and RRReporter::getReporter() removed
- RRDynamicSolver::getAllBuffers() can gather selected illumination buffers, second parameter added

\section news116 ------------------------------------ 2011.01.22 -------------------------------------

NEWS

- faces with flipped front/back (e.g. from SketchUp) can be automatically corrected
  - RRMeshArrays::flipFrontBack()
  - RRObjects::flipFrontBack()
  - scene viewer flips automatically (other samples don't)
- support for filtering cube map seams on GPU
  - prefilterSeams parameter added to RRDynamicSolver::updateEnvironmentMap()
  - prefilterSeams parameter added to RRLightField::captureLighting()
  - if you want GPU to filter seams, set prefilterSeams=false and enable GPU filtering in renderer (in OpenGL by glEnable(GL_TEXTURE_CUBE_MAP_SEAMLESS);)

CHANGES

- emissiveMultiplier parameter removed from all scene import functions
- generic RRObjects::multiplyEmittance() added to compensate previous removal

\section news115 ------------------------------------ 2010.12.21 -------------------------------------

CHANGES

- removed trivial functions in rr_gl::Camera, replace them with
  - cam->moveForward(a) -> cam->pos+=cam->dir*a;
  - cam->moveBack(a)    -> cam->pos-=cam->dir*a;
  - cam->moveRight(a)   -> cam->pos+=cam->right*a;
  - cam->moveLeft(a)    -> cam->pos-=cam->right*a;
  - cam->moveUp(a)      -> cam->pos+=cam->up*a;
  - cam->moveDown(a)    -> cam->pos-=cam->up*a;
  - cam->lean(a)        -> cam->leanAngle+=a;

\section news114 ------------------------------------ 2010.12.16 -------------------------------------

NEWS

- <b>realtime RGB shadows</b>
  - correct realtime shadows from colored glass and other thin semi-translucent materials
  - To see it, run SceneViewer sample, pick some shadow caster and change <code>Material properties / Transparency / color</code> e.g. to red.
    Shadow is now red.
    Change <code>Scene properties / GI quality / Shadow transparency</code> from 24-bit (rgb shadows)
    to 0-bit or 1-bit to see the difference, standard shadows don't have color.
  - realtime GI improves as well (red shadow reflects red light etc)
- <b>realtime RGB blending</b>
  - correct realtime rendering of colored glass and other thin semi-translucent materials
  - To see it, run SceneViewer sample and change <code>Material properties / Transparency / color</code> e.g. to red.
    Everything seen through material is now red.
    Change <code>Scene properties / Render materials / Transparency</code> from 24-bit (rgb blending)
    to 8-bit (alpha blending) to see the difference, common alpha blending lets other colors pass through.

  <table border=0><tr align=top><td>
  \image html features/rgbblend3.jpg RGB shadows + RGB blending
  </td><td>
  \image html features/rgbblend2.jpg monochromatic shadows
  </td><td>
  \image html features/rgbblend1.jpg alpha blending
  </td></tr></table>

CHANGES

- TransparentMaterialShadows renamed to ShadowTransparency
- transparentMaterialShadows split to rr_gl::RealtimeLight::shadowTransparencyRequested and rr_gl::RealtimeLight::shadowTransparencyActual
- very slightly increased effect of color bleeding (result of fix in GI solver)

\section news113 ------------------------------------ 2010.11.19 -------------------------------------

NEWS

- <b>video capture</b>
  - materials can play video capture in diffuse, emittance or transparency slot, GI updates in realtime
  - spotlights can project video capture, GI updates in realtime
  - environment can be streamed from video capture, GI updates in realtime
  - total support throughout Lightsprint SDK, use <b>c\@pture</b> as filename, instead of foo.jpg or foo.avi
    - in any 3d scene file (collada, 3ds, obj...)
    - in Scene Viewer's light properties and material properties or environment
    - in your code
  - full source code in <code>src/LightsprintIO/ImportDirectShow</code>
  - supported in Windows only

FIXES

- compressed textures in 2010.11.10 Lightspeed integration contained black strips

\section news112 ------------------------------------ 2010.11.10 -------------------------------------

NEWS

- improved \ref main_gamebryo3 "Gamebryo Lightspeed 3.1.1 integration"
  - LightsprintScene / LsSmoothingAmount
    - makes edges smoother, reduces noise, but washes out tiny details
    - can be used to reduce bake time: reduce quality and enable smoothing to hide noise
    - is a postprocess, so once you fill cache by "Bake lighting", you can change smoothing and quickly update lightmaps by "Bake from cache"
  - more robust Lightsprint / Bake from cache, works even after small changes in scene
  - more condensed warnings about wrong normals
  - LightSpeed 3.2 beta support
    - integration source code is compatible with unreleased GI Package for LightSpeed 3.2 beta
    - new menu items Lightsprint / Bake selected, Bake selected from cache
      - will let you bake lighting only for selected objects
      - disabled in src/Lightsprint.Toolbench.Plugin.UI/plugin.xml due to bug in GI Package 2.1.1
- higher quality lightmap baking
  - lightmap smoothing
    - in scene viewer: Scene properties / GI quality / Lightmap baking / Smoothing amount, Wrapping
    - RRDynamicSolver::FilteringParameters::smoothingAmount added
    - RRDynamicSolver::FilteringParameters::smoothBackground removed
    - RRDynamicSolver::FilteringParameters::spreadForegroundColor default changed to 0, it is no longer necessary to be 2
  - lightmap resolution/unwrap gutter may be much smaller without introducing errors/leaks
    - with unwrap charts optimally aligned, gutter may be as low as 1 texel without errors in lighting
    - smaller resolution reduces bake time, saves memory and disk space
    - smaller gutter increases utilization of lightmap space
- improved import/export
  - 128bit .exr textures
- RRBuffer tools
  - RRBuffer::clear()
  - RRBuffer::copyElementsTo()
  - RRBuffer::lightmapSmooth()
  - RRBuffer::lightmapGrowForBilinearInterpolation()
  - RRBuffer::lightmapGrow()
  - RRBuffer::lightmapFillBackground()

\section news111 ------------------------------------ 2010.10.16 -------------------------------------

NEWS

- improved import
  - new fileformats supported
    - Blender *.blend
    - Quake3 *.pk3
    - Nendo *.ndo
  - new options in scene viewer
    - User preferences / Import / Units
    - User preferences / Import / Up axis
  - new options in API
    - RRScene::normalizeUnits()
    - RRScene::normalizeUpAxis()
    - RRScene::transform()
- improved \ref main_gamebryo3 "Gamebryo Lightspeed 3.1.1 integration"
  - LightsprintScene / LsMimicRealtimeLighting added
    \n makes lightmaps more similar to realtime lighting
  - fixed bug that made lightmaps darker
- improved offline GI solver
  - RRLight::directLambertScaled added

CHANGES

- RRScene::RRScene() second parameter removed. If it was not 1, call RRScene::normalizeUnits()
- directional lightmaps are calculated for rendering with normalized tangent basis, like in Gamebryo
  \n let us know if you need old behaviour, maps for rendering with unnormalized tangent basis

\section news110 ------------------------------------ 2010.10.07 -------------------------------------

NEWS

- improved \ref main_gamebryo3 "Gamebryo Lightspeed 3.1.1 integration"
  - baking GI for multiple scene configurations at once
    - LsReplacementCase
    - LsReplacementConfiguration
    - If game always renders only one of several meshes (i.e. only one of bridge_new, bridge_damaged, bridge_collapsed),
      give them the same unique LsReplacementCase number (e.g. 100) and different LsReplacementConfiguration (e.g. 0,1,2).
      In a replacement case, different configurations don't shadow and illuminate each other; and only configuration 0 shadows and illuminates the rest of scene.
  - "Relighting" can open/save scenes from/to disk, like standalone SceneViewer sample
- enhanced scene viewer
  - User preferences panel with lots of new options
  - enhanced screenshot making, up to 16k*16k images with better shadows

CHANGES

- new render target API
  - removed rr_gl::Texture::renderingToBegin() and renderingToEnd()
  - added class rr_gl::FBO and header Lightsprint/GL/FBO.h
  - provides much finer control over render targets
  - all SDK elements support rendering to texture (solver, renderer, samples..)

\section news109 ------------------------------------ 2010.09.27 -------------------------------------

NEWS

- <b>panoramic textures, panoramic video</b>
  - no API changes, setEnvironment() now accepts more texture types
  - no scene viewer changes, "Sky texture" now accepts more texture types
  - 2d textures (not cross shaped) and videos are interpreted as 360*180 degree panorama in equirectangular projection
  - fully supported, works in
    - offline GI, illuminates scene
    - realtime GI, dynamically illuminates scene
    - realtime rendering
    - blending, you can blend e.g. lowres HDR panorama video with hires LDR cubemap and it just works
  - <a href="http://www.google.com/images?q=equirectangular">example images</a> \image html equirectangular.jpg
- <b>simpler and more flexible realtime GI</b>
  - RRDynamicSolver::reportMaterialChange() has two new parameters
    \n lets you comfortably update things that were not updated before
  - RRDynamicSolver::CalculateParameters contains new settings,
    \n gives you more control over GI calculation
  - RRDynamicSolver::setEmittance(parameters) removed, use existing RRDynamicSolver::reportMaterialChange(,true) and RRDynamicSolver::calculate(parameters)
  - if emissive textures/videos change, Fireball updates GI automatically, it's not necessary to reportMaterialChange()
- RRHash has new constructor
  \n lets you calculate SHA-1 hash easily
- enhanced realtime renderer
  - faster rendering with blending in huge scenes (10x faster in scene with 25k objects)
  - more detailed sun shadows in huge scenes (4x smaller details in 10x10km scene)
- enhanced scene viewer
  - lots of new options in Scene properties / GI quality
  - Window / Set viewport size

CHANGES

- RRBuffer::getElement(RRVec3) split in two functions
  - RRBuffer::getElementAtPosition(RRVec3)
    \n now you can sample also cube maps by planar coordinates
  - RRBuffer::getElementAtDirection(RRVec3)
    \n now you can sample also panorama textures by direction
- RRBuffer::loadCube() and RRBuffer::reloadCube() accept also 2d textures (in hope they are panoramic)
- allocateBuffersForRealtimeGI() has fourth parameter inserted
  \n Old code must be updated, find all allocateBuffersForRealtimeGI() calls with at least 4 parameters and insert fourth parameter -1.
- LIGHT_INDIRECT_auto=true does not enable LIGHT_INDIRECT_ENV_DIFFUSE and LIGHT_INDIRECT_ENV_SPECULAR.
  \n To get old behaviour, find all places where you set LIGHT_INDIRECT_auto=true and add LIGHT_INDIRECT_ENV_DIFFUSE=LIGHT_INDIRECT_ENV_SPECULAR=true.

\section news108 ------------------------------------ 2010.09.10 -------------------------------------

NEWS

- <b>skybox blending</b>
  - two skybox textures can be blended together
  - GI is updated in realtime, without noticeable slowdown
  - gamma correct, can blend both LDR and HDR 
  - RRDynamicSolver::setEnvironment() accepts optional second parameter, second texture
  - RRDynamicSolver::setEnvironmentBlendFactor() controls how textures are mixed
  - RRDynamicSolver::getEnvironment() accepts optional parameter, texture index, 0 or 1
  - RRDynamicSolver::getEnvironmentBlendFactor()
  - rr_gl::TextureRenderer::renderEnvironment() extended to support 2 skybox textures
- enhanced scene viewer
  - unit conversion dialog when opening scene with unknown units
  - skyboxes change with 3sec smooth transition with realtime GI
  - flashlight, alt-f toggles it
  - mouse wheel+ctrl moves camera forward/backward
  - alt-1,2,3 sets custom window layout 1, 2 or 3
- improved realtime shadow (CSM maps blend together, reduced shadow acne, reduced bias in detailed sun shadows, increased bias in other shadows)
- light can be easily enabled/disabled at any moment
  - RRlight::enabled
  - scene viewer / Light properties / Enabled
  - icons of disabled lights are dark
- RRMesh::getUvChannels() added

CHANGES

- scene viewer
  - lights are inserted from scene tree context menu, main menu "Lights" was removed
- rr_gl::TextureRenderer
  - renderEnvironmentBegin() and renderEnvironmentEnd() removed, use renderEnvironment()

\section news107 ------------------------------------ 2010.08.21 -------------------------------------

NEWS

- <b>improved \ref main_gamebryo3 "Gamebryo Lightspeed 3.1.1 integration"</b>
    <table><tr><td>
  - Lightmap postprocessing, new options added to LightsprintScene
    - LsColorTone
    - LsBrightness
    - LsContrast
    </td><td>
    \image html Toolbench-postprocessing.png
    </td></tr><tr><td>
  - You can change above settings in near realtime.
    - First, you have to "Bake" once to fill cache.
    - Then if you change postprocessing or compression option, click "Bake lighting from cache" for near instant update.
    </td><td>
    \image html Toolbench-menu.png
    </td></tr></table>
  - You can see individual lightmaps (in float precision).
    - Stored in (asset root)/PrecomputedLighting/cache.
    - Images in cache are only for you, Gamebryo has lightmaps stored in .nif (where one can't easily see them).
  - You can edit individual lightmaps (in float precision), in three steps
    - "Bake"
    - Then edit maps created in (asset root)/PrecomputedLighting/cache
    - And finally "Bake from cache" to apply your maps
- <b>enhanced realtime shadows</b> from Sun
  - smoother, more detailed, work in scenes of all sizes
  - can be configured for higher speed or quality, use
    - RRLight::rtNumShadowmaps
    - "Light properties / Shadowmaps" in scene viewer
- <b>enhanced scene viewer</b>
  - environment simulation
    - Sun can be automatically positioned according to geolocation and datetime, see Scene properties / Environment
    - Sun can be manually positioned also by azimuth and elevation angles, see Light properties
    - removed Environment menu, functionality moved to Scene properties / Environment
  - new mouse controls
    - move mouse with left button pressed = looking around
    - move mouse with middle button pressed = panning (pixel perfect)
    - move mouse with right button pressed = inspection (rotates around clicked pixel)
  - log window with "Abort" button shows up during slow operations
  - more help in Help menu
- <b>enhanced camera</b>
  - in scene viewer
    - Scene properties / Camera / View, can be set to Top, Bottom, Front, Back, Left, Right, Custom
    - Scene properties / Camera / Orthogonal
    - Scene properties / Camera / Center of screen
    - when working with ortho camera, mouse wheel changes ortho size
    - removed Camera menu, functionality moved to Scene properties / Camera / View
    - l/r/f/b/t hotkeys change camera view (left, right, front, back, top)
  - in rr_gl::Camera
    - rr_gl::Camera::blendAkima() (lets you do spline transitions between cameras)
    - rr_gl::Camera::setView()
    - rr_gl::Camera::getView()
    - rr_gl::Camera::screenCenter
    - rr_gl::Camera::getPositionInWindow()
    - rr_gl::Camera::getRayOrigin()
    - negative near and far allowed
- <b>new effects</b>
  <table><tr><td valign=top>
  - bloom
    - rr_gl::Bloom
    - in scene viewer: Scene properties / Render extras / Bloom
    </td><td>
    \image html bloom.jpg
    </td></tr><tr><td valign=top>
  - lens flare
    - rr_gl::LensFlare
    - in scene viewer: Scene properties / Render extras / Lens Flare
    </td><td>
    \image html lensflare.jpg
  </td></tr></table>
- random small enhancements
  - RRBuffer::brightnessGamma() added
  - RRReporter::createWindowedReporter() has new parameter, lets you change log window title

CHANGES

- minor cleanup in camera and light
  - renamed rr_gl::Camera::getDirection() to rr_gl::Camera::getRayDirection()
  - removed rr_gl::Camera::setPosDirRangeRandomly(), use rr_gl::Camera::setView(RANDOM)
  - removed second optional parameter in rr_gl::Camera::update()
  - removed optional parameter in rr_gl::Camera::update()
  - removed RRLight::rtMaxShadowSize
  - added rr_gl::RealtimeLight::configureCSM(), called automatically from RRDynamicSolverGL::updateShadowmaps()

FIXES

- BuildLightmaps sample ignored "direct" and "indirect" parameters

\section news106 ------------------------------------ 2010.07.16 -------------------------------------

NEWS

- improved \ref main_gamebryo3 "Gamebryo Lightspeed 3.1.1 integration"
  - new LsUseNonPCLMeshes in LightsprintScene lets you exclude non-PCL meshes from baking
  - new LsUseNonPCLLights in LightsprintScene lets you exclude non-PCL lights from baking
  - baking respects IsCastingShadow and IsReceivingShadow in Mesh
  - baking respects AlwaysAffectedByLight and NeverAffectedByLight in Light

\section news105 ------------------------------------ 2010.06.25 -------------------------------------

NEWS

- high quality automatic unwrap generation
  \n in code: call RRObjects::buildUnwrap()
  \n in Scene Viewer: click menu Global Illumination / Build unwrap
  \n changed default RRMaterial::lightmapTexcoord to UINT_MAX (no unwrap present)
  \n improved diagnostics if unwrap is missing/invalid
  \n removed old automatic unwrapping from default RRMesh::getTriangleMapping(,,0)
- improved scene viewer
  - File / Merge scene...
- small helper added
  rr_gl::Camera::blend()

CHANGES

- Modified lightmap filtering, better results with small gutter, sharp boundaries appear in lightmaps.

FIXES

- Fixed Scene viewer crash in Windows XP
- Workaround added for GI Package bug that made Gamebryo 3.1.1 crash

\section news104 ------------------------------------ 2010.06.03 -------------------------------------

NEWS

- improved realtime renderer
  - reduced shadow bias (more bits in shadowmaps)
  - filtered shadowmap edges on Radeons HD 2400-5970
  - antialiasing in Sceneviewer
  - reduced z-fight in Sceneviewer (more bits in framebuffer depth)
  - extended fallback mechanism for legacy GPUs, better results e.g. on Radeon X300
  - custom clipping extended from 1 to 6 planes (ubershader parameter CLIP_PLANE extended to CLIP_PLANE_[X|Y|Z][A|B], parameter float clipPlaneY in rendering functions extended to float* clipPlanes)
- improved scene viewer
  - spincontrols, edit by mouse click or motion
  - readonly properties grayed out

\section news103 ------------------------------------ 2010.05.20 -------------------------------------

NEWS

- full Visual Studio 2010 support (32bit, 64bit)

\section news102 ------------------------------------ 2010.05.11 -------------------------------------

NEWS

- \ref main_gamebryo3 "Gamebryo Lightspeed 3.1.1 integration"
  - HDR lightmaps support (automatic)
  - updated to the most recent Lightspeed and GI Package versions
- parallelized Architect solver, 2.5x speedup on 4core CPU
- small API extensions
  - RRBuffer::getMinMax() added
  - RRObject::LayerParameter::createBuffers() optional parameter added
- new tone mapping settings in rr_gl::SceneViewerState (available also from SceneViewer GUI)
  - tonemappingAutomaticTarget
  - tonemappingAutomaticSpeed

CHANGES

- .rr3 format changed to ensure platform independence
- renames in rr_gl::SceneViewerState
  - brightness renamed to tonemappingBrightness
  - gamma renamed to tonemappingGamma
  - adjustTonemapping renamed to tonemappingAutomatic

\section news101 ------------------------------------ 2010.05.01 -------------------------------------

NEWS

- enhanced collada import (workarounds for know bugs in exporters etc)
- enhanced SceneViewer (grid options in Scene properties)

CHANGES

- if Visual Studio project needs specific DXSDK version, it explicitly specifies which one
  - makes it possible to use different DXSDK versions in different projects, paths are specified in .vcproj
  - should work without any changes on your side
  - note: only Gamebryo integration needs DXSDK

\section news100 ------------------------------------ 2010.04.11 -------------------------------------

NEWS

- saving 3d scenes
  - scene viewer "File / Save scene" and "Save scene as..." added
  - RRScene::save() added
  - RRScene::getSupportedExtensions() split into RRScene::getSupportedLoaderExtensions() and RRScene::getSupportedSaverExtensions()
  - RRScene::registerSaver() added
  - RRScene::Saver added
- new scene formats (full list of \ref supported_formats)
  - Lightsprint .rr3, reading, writing
    \n This is first time we introduce new format, after supporting ~35 existing scene formats.
    Advantages: 50-200x faster load, 2-6x smaller than other formats.
    You don't have to use .rr3, it's just an option.
  - trueSpace .cob, reading
- state of the art Collada support
  - new robust OpenCollada based loader, fully contained withing LightsprintIO library, no additional headers or libraries
  - Collada 1.5.0 support (in addition to 1.4.x)
  - Google SketchUp support (SketchUp exports Collada with unusual instancig technique, other loaders don't support)
  - two other Collada loaders (FCollada, Assimp) still available for reference
  - FCollada disabled by default, executables don't depend on fcollada.dll/so
- editing 3d scenes
  - you can freely edit RRScene objects, lights and environment (they were read-only before)
- enhanced SceneViewer
  - "Material properties" shows texture miniatures and colors
  - menu "Render" moved to "Scene properties"
  - workspaces are persistent, saved to per-user config file

CHANGES

- when using RRScene
  - change getObjects() to objects
  - change getLights() to lights
  - change getEnvironment() to environment
  - you can edit objects, lights, environment, while getXxx() were for reading only
- when implementing RRScene
  - change "objects =" to "protectedObjects ="
  - change "lights =" to "protectedLights ="
  - remove environment and getEnvironment() from your implementation, environment is now in RRScene
- moved from RRObjects to RRObject
  - RRObject::LayerParameters
  - RRObject::recommendLayerParameters()

\section news99 ------------------------------------ 2010.02.17 -------------------------------------

NEWS

- <b>video</b>
  - materials can play video in diffuse, emittance or transparency slot, GI updates in realtime
    <table border=0><tr align=top><td>
    \image html emissive_video_1.jpg video in emissive slot
    </td><td>
    \image html emissive_video_2.jpg (setting it takes 4 clicks in SceneViewer)
    </td></tr></table>
  - spotlights can project video, GI updates in realtime
    \image html samples/RealtimeRadiosity_3.jpg projected video in RealtimeRadiosity sample
  - plays with sound
  - total support throughout Lightsprint SDK, use foo.avi instead of foo.jpg
    - in any 3d scene file (collada, 3ds, obj...)
    - in Scene Viewer's light properties and material properties
    - in your code
  - RRBuffer extended to let you control video
    - RRBuffer::play()
    - RRBuffer::stop()
    - RRBuffer::pause()
    - RRBuffer::update()
    - RRBuffer::getDuration()
  - full source code in <code>src/LightsprintIO/ImportDirectShow</code>
  - serves also as an example of writing custom RRBuffer
  - supported in Windows only
  - spacebar in SceneViewer pauses/resumes videos
- \ref main_gamebryo3 "Lightspeed 3.1 integration" adds
  - Direct light multiplier
  - Indirect light multiplier
  - Emissive multiplier (newly also in LightsprintMesh)
  <table border=0><tr align=top><td>
  \image html Toolbench-LightsprintScene.png
  </td><td>
  \image html Toolbench-LightsprintMesh.png
  </td></tr></table>
  - lightmaps are not built for plain Mesh entities, make your entity PCLMesh or LightsprintMesh to get lightmap
- added rr_gl::RealtimeLight::changesInProjectedTextureAffectGI,
  \n makes it easier to manage GI quality when editing projected texture in realtime
- added RRDynamicSolver::getAllBuffers(),
  \n helper for gathering all texture filenames, memory statistics etc
- added BF_BGR format,
  \n for DirectShow interoperability

CHANGES

- RRLight::rtProjectedTexture replaces RRLight::rtProjectedTextureFilename and RealtimeLight::setProjectedTexture(),
  \n simplifies API
- RRBuffer::Loader and RRBuffer::setLoader() split in two,
  - RRBuffer::Loader and RRBuffer::setLoader() sets implementation of RRBuffer::load()
  - RRBuffer::Reloader and RRBuffer::setReloader sets implementation of RRBuffer::reload()
  \n adds flexibility necessary for video importers
- const removed from environment in RRScene::getEnvironment(), RRDynamicSolver::getEnvironment(), RRDynamicSolver::setEnvironment(),
  \n makes it easier to manipulate environment in realtime

\section news98 ------------------------------------ 2010.01.21 -------------------------------------

NEWS

- enhanced SceneViewer
  - added File / Save enhanced screenshot
  - added Light properties / Shadow samples

CHANGES

- rr_gl::RealtimeLight::setNumShadowSamples() replaces rr_gl::RealtimeLight::softShadowsAllowed

\section news97 ------------------------------------ 2010.01.10 -------------------------------------

CHANGES

- removed RRDynamicSolver::SmoothingParameters::minFeatureSize

\section news96 ------------------------------------ 2010.01.03 -------------------------------------

NEWS

- <b>support added for 30 scene formats</b>
  - see full list of \ref supported_formats
  \image html SceneViewer_3.jpg
- RRBuffer::load() is faster and saves memory when loading the same image multiple times
  - all images are transparently cached
  - removed old caching from Collada adapter
  - added RRBuffer::createReference()
  - added RRBuffer::getReferenceCount()
- \ref main_vs "Visual Studio integration"
- improved diagnostics
  - added RRObjects::checkConsistency()
  - added RRObject::checkConsistency()
  - modified RRMesh::checkConsistency() parameters
  - \ref main_gamebryo3 integration always checks consistency before bake

CHANGES

- RRMaterial changes
  - RRMaterial owns textures, it deletes them in destructor, custom adapters must stop deleting them to avoid double delete
  - RRPointMaterial added, it is material that does not own/does not delete textures
  - custom getPointMaterial() implementations must change output type from RRMaterial to RRPointMaterial
  - RRMaterial is noncopyable, copying should be avoided, use RRMaterial::copyFrom() if necessary
- RRObject::createWorldSpaceObject() removed, let us know if you need it
- RRScene::registerLoader() expects extensions in "*.abc;*.cde" format rather than old "abc"

\section news95 ------------------------------------ 2010 beta (2009.12.11) -------------------------------------

NEWS

- <b>\ref main_gamebryo3 "Lightspeed 3.1 integration"</b>
  - new bake target Compressed Texture (6x smaller, DXT1 compression)
- <b>manipulate everything in realtime</b>, scene API extended from read-only to read-write
  - mesh indices and vertices
    - RRMeshArrays added, lets you edit index+vertex arrays
    - RRMesh::createArrays() added, creates editable copy of mesh
  - object materials
    - RRObject::faceGroups added,
      \n your RRObject implementation must fill it
    - RRObject::getTriangleMaterial() modified
      - default implementation added, in most cases you can delete yours
      - returned material is not const so it can be edited
    - RRObject::updateFacegroupsFromTriangleMaterials() added
      \n helps fill faceGroups
  - object transformation
    - RRObject::setWorldMatrix() added
    - RRObject::getWorldMatrix() default implementation improved, delete yours, just call setWorldMatrix() once
    - RRObject::getWorldMatrix() changed to const, delete or fix your implementation
    - RRObject::getWorldMatrixRef() added
  - object's collider and mesh
    - RRObject::setCollider() added
    - RRObject::getCollider() default implementation added, you can delete yours, just call setCollider() once
  - works for all 40 supported formats
- <b>dynamic object support</b> (completed)
  - RRDynamicSolver::setDynamicObjects() added
  - RRDynamicSolver::getDynamicObjects() added
  - everything works as expected, simply set and manipulate dynamic objects, they render, affect illumination etc
- <b>new realtime renderer</b>
  - faster, using less memory (in most cases)
  - automatically renders also dynamic objects (but it's still possible to use custom renderer as in RealtimeRadiosity sample)
  - you can change transformations, materials and textures on the fly, changes propagate to GPU automatically
  - you can change geometry in RRMeshArrays on the fly, changes propagate to GPU automatically
  - materials with smooth blending and materials with 1bit alpha can be combined
  - static and dynamic objects sort and blend correctly if blending is used
  - removed RendererOfRRObject, no longer necessary
  - no longer necessary to call rr_gl::Texture::reset()
- <b>enhanced SceneViewer</b>
  - added object properties window
  - added material properties window
  \image html SceneViewer_2.jpg
- <b>rr_gl::RRDynamicSolverGL completed</b>
  - can be used for realtime rendering out of the box, does not contain pure functions
  - rr_gl::RRDynamicSolverGL::renderScene() implemented, added parameters
- compressed buffer formats RRBufferFormat::BF_DXT1, BF_DXT3, BF_DXT5
- all important classes have editable names
  - added RRString
  - added RRBuffer::filename
  - added RRLight::name
  - changed RRLight::rtProjectedTextureFilename to RRString from char* (delete eventual _strdup() and free() from your custom adapter)
  - changed RRMaterial::name to RRString from const char* (delete eventual _strdup() and free() from your custom adapter)
  - added RRObject::name
  - removed RRObject::getCustomData("const char* objectName"), use RRObject::name
- added small helpers
  - RRMatrix3x4::isIdentity()
  - RRMaterial::needsBlending()
  - RRVector::resize()
  - RRBuffer::version, updated to solver->getSolutionVersion() each time buffer is updated from solver
- <b>greatly simplified samples</b>
  - new features listed above made source code of realtime rendering samples considerably shorter (e.g. RealtimeLights roughly 5x shorter)

CHANGES

- const removed from RRObject::getTriangleMaterial(), remove const from your implementations or delete your implementation.
  \n This change makes returned materials writeable, they can be modified.
- simplified scene adapters
  - worldMatrix is stored in base RRObject, remove worldMatrix and getWorldMatrix() from your derived classes
  - illumination is stored in base RRObject, remove illumination and getIllumination() from your derived classes
  - objects and lights are stored in RRScene, remove your objects/lights variables and getLights()/getObjects() functions and objects/lights deleting from your derived classes
  - RRScene::getObjects() and RRScene::getLights() return reference, user doesn't have to check for NULL
- cleanup in RRDynamicSolver
  - removed RRIlluminatedObject
    - RRObjects is now collection of RRObject
    - illumination was moved to RRObject::illumination
    - scene adapters no longer allocate/delete illumination -> simpler adapters
    - change objects[i].object to objects[i]
    - change objects[i].illumination-> to objects[i]->illumination.
  - removed getNumObjects(), use getStaticObjects().size()
  - removed getObject(i), use getStaticObjects()[i] and make sure i is not out of range, new version checks it only in debug
  - removed getIllumination(i), use getStaticObjects()[i]->illumination and make sure i is not out of range
  - extended RRDynamicSolver::allocateBuffersForRealtimeGI(), new parameters, you can use also new RRObjects::allocateBuffersForRealtimeGI()
- modified parameters of RRObject::createMultiObject(), array+length replaced by vector
- simplified rr_gl::RendererOfScene
  - reduced to single simple function
  - renders (and optionally updates) only illumination in existing buffers (vertex buffers, textures),
    you have to allocate these buffers first (using e.g. RRDynamicSolver::allocateBuffersForRealtimeGI()).
- renamed RRBuffer::getMemoryOccupied() to RRBuffer::getBufferBytes(), returns pure buffer data size without several bytes of fixed overhead
- removed rr_gl::RRDynamicSolverGL::getMaterialsInStaticScene(), no longer needed
- removed rr_gl::UberProgramSetup::recommendMaterialSetup(), use rr_gl::UberProgramSetup::enableAllMaterials()
- renamed rr_gl::UberProgramSetup::reduceMaterialSetup() to rr_gl::UberProgramSetup::reduceMaterials()
- removed RRObjectWithPhysicalMaterials

KNOWN REGRESSIONS

- old automatic unwrap is no longer working, it will be replaced by new higher quality unwrap
- realtime renderer ignores uv channel numbers above 100, let us know if you need them

\section news94 ------------------------------------ 2009.10.10 -------------------------------------

NEWS

- internal hashing functions exposed
  - class RRHash and include/Lightsprint/RRHash.h added
  - RRObject::getHash() added
  - RRMesh::getHash() modified to return RRHash

CHANGES

- additional parameter in RRDynamicSolver::loadFireball()

\section news93 ------------------------------------ 2009.10.06 -------------------------------------

NEWS

- enhanced rr_gl::sceneViewer() and SceneViewer sample
   - added light icons
   - added scene properties window
- improved water rendering in rr_gl::Water
   - see new parameters in rr_gl::Water::Water(), rr_gl::Water::render()

FIXED

- wrong light directions in Lightspeed integration

\section news92 ------------------------------------ 2009.09.24 -------------------------------------

NEWS

- \ref main_gamebryo3 "Lightspeed integration" comes with preconfigured sample scenes
  <table border=0><tr align=top><td>
  \image html Toolbench-Cathedral.jpg
  </td><td>
  \image html Toolbench-Cornell.jpg
  </td></tr></table>
- enhanced rr_gl::sceneViewer() and SceneViewer sample
  - added scene tree window
  - all windows dockable
  \image html SceneViewer_1.jpg
- small RRBuffer changes
  - RRBuffer::flip() added
  - RRBuffer::load() flip parameters removed, use flip() instead
  - RRBuffer::SaveParameters added with jpeg quality, used as parameter in RRBuffer::save()

\section news91 ------------------------------------ 2009.08.30 -------------------------------------

NEWS

- improved \ref main_gamebryo3 "Lightspeed integration"
  - bake is faster and uses less memory
  - supports lightmap resolution calculated from mapping, see new properties
    - LightsprintScene.LsPixelsPerWorldUnit
    - LightsprintMesh.LsResolutionMode
    - LightsprintMesh.LsResolutionMultiplier
  - GIScene.LightingFile is set automatically, if needed
  - if LightPCLObjectsAtRuntime && LightNonPCLObjectsAtRuntime, calculates indirect illumination only
  - relighting in UI menu (testing only)

  <table border=0><tr align=top><td>
  \image html Toolbench-LightsprintScene.png
  </td><td>
  \image html Toolbench-LightsprintMesh.png
  </td></tr></table>

- small helper functions
  - RRMesh::getMappingDensity()
  - RRMatrix3x4::setIdentity()
  - LightsprintGL source code comes with boost::serialization support

CHANGES

- Gamebryo
  - if environment color is not set (=is black), it does not multiply environment texture
  - several properties renamed
- RR_ prefix added to macros that did not have it yet (RR_CLAMP, RR_CLAMPED, RR_FLOAT2BYTE, RR_BYTE2FLOAT, RR_LIMITED_TIMES)

FIXED

- Visual C++ 2005 binaries did not run if Microsoft security updates were not installed

\section news90 ------------------------------------ 2009.08.15 -------------------------------------

NEWS

- improved \ref main_gamebryo3 "Lightspeed integration"
  - LightsprintModelLibrary added, new per-mesh and per-scene settings
  - supports directional lightmaps (radiosity normal maps)
  - supports environment (HDR or LDR texture, color..)
  - works with GI Package 2.0.1

\section news89 ------------------------------------ 2009.08.02 -------------------------------------

NEWS

- \ref main_gamebryo3 "Lightspeed integration (Gamebryo 3.0)" - testing version
- RRObject::getCustomData() added
  \n makes it possible to access format specific data via generic RRObject interface

\section news88 ------------------------------------ 2009.07.18 -------------------------------------

CHANGES

- additional parameter clipPlaneY in several rendering functions

FIXED

- realtime GI was incorrect in big scenes and in tiny windows

\section news87 ------------------------------------ 2009.06.29 -------------------------------------

NEWS

- faster realtime render (up to 10x higher fps in huge high poly scenes, 10% speedup in small scenes)
- 2x lower video memory footprint in high poly scenes

\section news86 ------------------------------------ 2009.06.19 -------------------------------------

CHANGES

- reduced number of dlls, all wxWidgets files are gone
- RRBuffer::setLoader() split into RRBuffer::setLoader() and RRBuffer::setSaver(),
  \n both return previous loader/saver
- source code licensee only:
  - precompiled wxWidgets removed from SDK, \ref tpl_wx "build your own wxWidgets"
  - Runtime Library in all static configurations changed to DLL

\section news85 ------------------------------------ 2009.06.05 -------------------------------------

NEWS

- faster realtime render (up to 2x higher fps in Lightsmark)
- enhanced rr_gl::sceneViewer() and SceneViewer sample
  - new "Global illumination" menu adds capabilities, replaces "Realtime lighting" and "Static lighting" menus
  - new parameter releaseResources lets you exit faster without releasing stuff

CHANGES

- several members of rr_gl::SceneViewerState renamed or added to better cover new capabilities
- new parameter lightIndirectVersion in several rr_gl rendering function
  \n changing it only when illumination changes makes realtime render faster

\section news84 ------------------------------------ 2009.05.29 -------------------------------------

NEWS

- enhanced rr_gl::TextureRenderer
  - new parameter float gamma for gamma correction
  - parameters float color[4] changed to RRVec4 color (pass RRVec4(1) where you passed NULL)
- enhanced rr_gl::sceneViewer() and SceneViewer sample
  - help as overlay image
  - new menu items: render FPS
  - adjust contrast
  - render logo
  - render vignette effect
- RRMesh::getAABB() is much faster when called multiple times (results are cached in RRMesh)
- tone mapping can be configured for brighter or darker results
  \n see new parameter targetIntensity in rr_gl::ToneMapping::adjustOperator()

CHANGES

- rr_gl::Camera::setRangeDynamically() replaces rr_gl::Camera::setNearDynamically()
  \n new function sets both near and far

\section news83 ------------------------------------ 2009.05.16 -------------------------------------

NEWS

- Gamebryo integration includes new realtime GI example, run samples/BuildLightmaps/Gamebryo-Realtime-Cathedral.bat
- UE3 integration supports work with selected objects only
- improved scene import
  - improved diagnostics if VERIFY is defined (unwraps are checked, mesh numbers are reported thanks to RRMesh::checkConsistency() new parameter)
  - .obj loader reads also normals and uvs

CHANGES

- different 3ds object numbers
  \n previously, cameras and lights figured in RRObjects array as meshes with 0 triangles

\section news82 ------------------------------------ 2009.05.07 -------------------------------------

NEWS

- realistic realtime specular reflections
  - enabled in rr_gl::sceneViewer() and SceneViewer and BuildLightmaps samples
    \n default rr_gl::SceneViewerState::renderSpecular was changed to true
  - new RRDynamicSolver::updateBuffersForRealtimeGI()
    \n allocates and updates vertex buffers and reflection maps, structures used to pass computed GI to external renderers
  - new RRDynamicSolver::allocateBuffersForRealtimeGI()
    \n allocates vertex buffers and reflection maps, structures used to pass computed GI to external renderers

  <table border=0><tr align=top><td>
  \image html features/light-spot.jpg
  </td><td>
  \image html features/light-point.jpg
  </td><td>
  \image html features/light-dir.jpg
  </td></tr></table>

- new rr_gl::RendererOfScene::useRealtimeGI() function
  \n simplifies realtime GI rendering
  \n makes renderer allocate and update GI buffers automatically, using reasonable qualities and resolutions

CHANGES

- rr_gl::RendererOfScene::render() does not clear color buffer
  \n To fix existing code, clear also color buffer before
  rendering scene, change glClear(GL_DEPTH_BUFFER_BIT);
  to glClear(GL_DEPTH_BUFFER_BIT|GL_COLOR_BUFFER_BIT);

FIXED

- black spots in lightmaps lit by spotlights

\section news81 ------------------------------------ 2009.05.02 -------------------------------------

NEWS

- realtime GI from emissive surfaces
  - \ref calc_fireball supports emissive surfaces
    \n this makes Fireball complete, it calculates GI from all \ref inputs_light_sources in real-time
  - new RRDynamicSolver::setEmittance()
    \n streaming video to emissive map? Call this in every frame to update GI from updated emissive maps.
    \n emissiveMultiplier parameter lets you multiply emittance globally

  <table border=0><tr align=top><td>
  \image html features/emis1.jpg
  </td><td>
  \image html features/emis2.jpg
  </td></tr></table>

- improved 3ds import
  - imports face sidedness, specular color
  - if opacity map is the same as diffuse map, transparency is taken from alpha channel
- minor helpers
  - mini(), maxi(), normalizeSafe() added to RRVec2, RRVec3, RRVec4 
  - RR_BIG_ENDIAN defined on big endian platforms

CHANGES

- default realtime GI solver in rr_gl::sceneViewer(), SceneViewer and BuildLightmaps samples changed to Fireball
  \n Fireball makes rendering faster and GI is complete (includes skylight)
  \n when opening scene for first time, Fireball is built automatically at medium quality 350
  \n use menu Realtime lighting / Rebuild fireball to change quality

FIXED

- realtime renderer incorrectly illuminated 2-sided faces
- nearly opaque materials were handled as fully opaque, so light did not get through very dark glass

\section news80 ------------------------------------ 2009.04.20 -------------------------------------

NEWS

- realtime GI from skylight
  - no API changes, build Fireball and set sky as usual (RRDynamicSolver::buildFireball(), RRDynamicSolver::setEnvironment()),
    but this time, all static and dynamic objects will be illuminated also by sky
  - infinite light bounces
  - fully dynamic, change sky as often as you wish

  <table border=0><tr align=top><td>
  \image html features/environment1.jpg
  </td><td>
  \image html features/environment2.jpg
  </td></tr></table>

- new per-vertex illumination smoothing mode
  - RRDynamicSolver::SmoothingParameters::maxSmoothAngle default _is_ -0.01
    \n this smooths per-vertex illumination where vertex normals are similar,
    ignoring RRDynamicSolver::SmoothingParameters::minFeatureSize.
  - RRDynamicSolver::SmoothingParameters::maxSmoothAngle default _was_ 0.33,
    \n this smoothed illumination where face normals were similar,
    with additional blur specified by RRDynamicSolver::SmoothingParameters::minFeatureSize.
  - new parameter in RRMesh::createOptimizedVertices() and RRObject::createMultiObject()
    \n makes it possible to stitch only vertices with similar normals
- improved rr_gl::sceneViewer(), SceneViewer sample, BuildLightmaps tools
  - new Environment / Load skybox... menu item
- improved cube map loading
  - new RRBuffer::loadCube() and RRBuffer::reloadCube()
    \n load cubemap specified by single filename, eventual filenames of other 5 sides are guessed
- new math macros prefixed RR_ added to RRMath.h
- new utility functions RRDynamicSolver::containsLightSource() and RRDynamicSolver::containsRealtimeGILightSource()

CHANGES

- default per-vertex smoothing technique specified by RRDynamicSolver::SmoothingParameters::maxSmoothAngle was changed, see above
- loading cubemaps made of 6 files via RRBuffer::load() works with default parameters flipV and flipH = false,
  previously these had to be true

*/

};

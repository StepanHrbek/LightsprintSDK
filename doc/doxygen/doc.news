namespace rr
{

/**

\file doc.news
\brief Documentation only.

\page main_news What's new

\section news77 ------------------------------------ 2009.03.x -------------------------------------

NEWS

- File/Open... added to SceneViewer sample and rr_gl::sceneViewer()
- texture manipulation functions
  - RRBuffer::createCopy()
  - RRBuffer::setFormat()
  - RRBuffer::setFormatFloats()
  - RRBuffer::invert()
  - RRBuffer::multiplyAdd() extends old to RRBuffer::multiply()
  - RRMaterial::Property::multiplyAdd() extends old RRMaterial::Property::multiply()

CHANGES

- rr_io::ImportScene replaced by RRScene
- rr_io::setImageLoader() replaced by rr_io::registerLoaders()
  \n new function registers also 3d scene loaders that did not need registration before
- RRObjects moved from RRDynamicSolver.h to RRObject.h

FIXES

- MovingSun sample lighting was incorrect

\section news76 ------------------------------------ 2009.03.14 -------------------------------------

NEWS

- Improved handling of overlapping triangles.
  \n It's still recommended to avoid them, but if you must use them, chances are that precomputed lightmaps will be ok.
  \n Previously \ref main_ue3 "UE3" skylight created dark strips where terrain segments overlap.
- tangent space vectors are displayed in rr_gl::sceneViewer() with helpers enabled

FIXES

- UE3 materials had swapped R and B (incorrect color bleeding)
- one of cascaded shadow mapps was not updated (incorrect realtime sunlight shadows)

\section news75 ------------------------------------ 2009.02.23 -------------------------------------

NEWS

- \ref main_ue3 "UE3 integration" produces higher quality lightmaps in proximity of SpeedTree meshes
  (fixed per-pixel material detection)

\section news74 ------------------------------------ 2009.02.19 -------------------------------------

NEWS

- emissive multiplier, lets you boost or reduce emissivity in materials
  - new parameter "emissivemultiplier=1" in BuildLightmaps tool
  - new parameter in rr_io::ImportSceneRRLight::ImportSceneRRLight()
  - adapters call new RRMaterial::Property::multiply() to apply emissive multiplier

\section news73 ------------------------------------ 2009.02.06 -------------------------------------

NEWS

- RRLight::rtProjectedTextureFilename
  \n lets you specify texture projected by light

CHANGES

- rr_gl::RealtimeLight::lightDirectMap replaced by
  - rr_gl::RealtimeLight::setProjectedTexture()
  - rr_gl::RealtimeLight::getProjectedTexture()
- RRLight::createMutableLight() replaced by new RRLight()
  \n RRLight is now fully implemented, previously RRLight::getIrradiance() was pure/abstract

\section news72 ------------------------------------ 2009.01.10 -------------------------------------

NEWS

- sample BuildLightmaps supports setting sky from commandline (HDR or LDR texture or 6 textures or flat color or upper and lower hemisphere color)
- improved realtime render of float textures
  - uses floats where available, falls back to 8bit on ancient GPUs
  - HDR skyboxes in physical scale are converted to sRGB in shader

FIXED

- Gamebryo adapter allocated too much memory and crashed in some scenes

\section news71 ------------------------------------ 2009.01.08 -------------------------------------

NEWS

- \ref main_ue3 "UE3 integration" produces higher quality lightmaps: now also SpeedTree materials are evaluated per-pixel

CHANGES

- default behaviour of back side of one sided material was changed
  \n Previously, photons that hit back side of one-sided face were removed from simulation. Windows had to be made of 2-sided faces to transmit light in both directions.
  \n Now photons are allowed to go through back side and refract according to material transmittance and refraction index. Windows transmit light in both directions even if they are made of 1-sided faces.

\section news70 ------------------------------------ 2009.01.07 -------------------------------------

NEWS

- \ref main_ue3 "UE3 integration" produces higher quality lightmaps: staticmesh and bspsurface materials are evaluated per-pixel
- 2x faster windowed reporter (RRReporter::createWindowedReporter())
  \n (real world example: building preview quality lightmaps in scene with 11000 meshes and windowed reporter took 600s, now 500s)

CHANGES

- rr_gl::sceneViewer() second parameter removed (bool createWindow)
  \n window is always created, false was ignored since sceneViewer rewrite in 2008.12.8

\section news69 ------------------------------------ 2008.12.19 -------------------------------------

NEWS

- BuildLightmaps tool lets you change lightmap resolution, format etc for individual objects
- new RRObjects::recommendLayerParameters() recommends lightmap resolution, filename etc

CHANGES

- RRObjects::LayerParameters replaces RRIlluminatedObject::LayerParameters (added in previous release)
- RRObjects::createLayer() was removed (added in previous release),
  \n new RRObjects::recommendLayerParameters() is more flexible

\section news68 ------------------------------------ 2008.12.8 -------------------------------------

NEWS

- \ref main_gamebryo "Gamebryo integration"
- new \ref samples_offline "BuildLightmaps tool"
- new GUI in rr_gl::sceneViewer()
  - all light properties editable in new Light Properties window
  - context menu changed to menu bar
  - LightsprintGL does not depend on glut (remains in SDK, because samples use it)
  - LightsprintGL depends on wxWidgets (precompiled Windows version added to SDK)
  - minor other changes in controls
- simplified mesh adapters (RRMesh implementations in LightsprintIO reduced by 30%)
  - RRChanneledData removed
  - RRMesh::getTriangleMapping() extended to support multiple texcoord channels
  - RRMaterial::lightmapTexcoord added
- point materials API simplified, point materials faster, used more often
  - for point materials, you need only to set material textures and call RRMaterial::updateColorsFromTextures(),
    everything else is handled by default implementation of RRObject::getPointMaterial()
  - custom RRObject::getPointMaterial() implementations removed from adapters
  - RRMaterial::minimalQualityForPointMaterials replaces RRSideBits::pointDetails (no need to touch it)
  - Point materials in Collada and Quake3 scenes are used more often. For identical quality settings,
    new solver produces illumination of slightly higher quality in slightly longer time.
- RRMaterial::specularReflectance extended to support colors and textures
- realtime lights more flexible
  - rr_gl::RealtimeLight always contains RRLight
  - it's always legal to edit RRLight properties as long as you call rr_gl::RealtimeLight::updateAfterRRLightChanges() later
  - minor other changes in rr_gl::RealtimeLight
- RRObjects made more flexible
  - RRObjects::createLayer() creates empty buffers for whole layer
  - RRObjects::loadLayer() replaces RRObjects::loadIllumination()
  - RRObjects::saveLayer() replaces RRObjects::saveIllumination()

CHANGES

- sample AmbientOcclusion removed, replaced by BuildLightmaps
- samples/samples.vs200x.sln removed, replaced by src/Lightsprint.vs200x.sln

\section news67 ------------------------------------ 2008.11.16 -------------------------------------

NEWS

- distance attenuation model POLYNOMIAL was extended to support Gamebryo,
  \n RRLight::polynom extended from RRVec3 to RRVec4

\section news66 ------------------------------------ 2008.11.2 -------------------------------------

NEWS

- log window has lots of new features
  \n (no API changes, it's still created by RRReporter::createWindowedReporter())
- doesn't rely on doubles having double precision
  \n so if you use D3DCREATE_FPU_PRESERVE because of Lightsprint, feel free to remove it
- RRLight::createMutableLight()

CHANGES

- rr_gl::Camera::dir changed from RRVec4 to RRVec3, fourth element was not used
- RRMesh::Plane removed, RRMesh::getTrianglePlane() second parameter changed to RRVec4
- RRRay::hitPlane changed from RRVec3p to RRVec4

\section news65 ------------------------------------ 2008.10.4 -------------------------------------

NEWS

- parallel radiosity, offline lightmap build 5-50% faster
- \ref vs2005_64 "Visual Studio 2005 x64 support" (partial)

\section news64 ------------------------------------ 2008.9.24 -------------------------------------

NEWS

- faster asynchronous abort, parameter <code>bool& aborting</code> added to several functions
- RRReporter::createWindowedReporter()
  \n Creates window to display messages.
  \n User can abort tasks between reporter create and reporter delete be closing the window.
- rr_gl::Camera::setNearDynamically() sets near dynamically to prevent clipping of near objects
  \n rr_gl::sceneViewer() uses it by default
- in rr_gl::Camera, dir, right and up vectors are guaranteed to be orthonormal
  \n (previously they were denormalized and up was not orthogonal to dir)
- RRCollisionHandler::init() has new parameter that allows it to set required ray flags
  \n (caller is no longer reponsible for setting ray flags for collision handler)

CHANGES

- rr_gl::updateLightmapsWithDialog() removed, use more generic RRReporter::createWindowedReporter()
- in rr_gl::Camera, several variables were made private, use new get/setters to access them
  \n (it's no longer possible to set invalid values like FOV over 180 degrees)

\section news63 ------------------------------------ 2008.9.14 -------------------------------------

NEWS

- INF and NaN vertices in meshes mostly harmless
  \n (see RRDynamicSolver::SmoothingParameters::vertexWeldDistance for details)
- fixed crash while processing specific SpeedTree meshes
- rr_gl::Water - water effect with waves, reflection, fresnel
  \n (it's back with improved compatibility and quality)

CHANGES

- game engine integration projects moved from samples/ImportXXX to src/LightsprintXXX
- cleanup: removed RRMesh::getInvWorldMatrix(), RRDynamicSolver::SmoothingParameters::subdivisionSpeed,
  honourExpensiveLightingShadowingFlags

\section news62 ------------------------------------ 2008.8.20 -------------------------------------

NEWS

- 32bit Linux support (64bit was already supported)
- outside SDK: new realtime GI demo <a href="http://dee.cz/lightsmark">Lightsmark 2008</a>

CHANGES

- single function loadLicense() replaces old classes RRLicense and RRLicenseCollider
- verify() functions renamed to checkConsistency() (because UE3 contains macro verify)

\section news61 ------------------------------------ 2008.7.11 -------------------------------------

NEWS

- Light Detail Maps
  \n precomputed maps that greatly enhance precision of realtime GI at cost of single lookup in shader
  \n available in rr_gl::sceneViewer(), better example will follow
- extended rr_gl::sceneViewer(), it's possible to set initial camera and more than 20 other parameters.
  (For realtime GI viewer, change last two parameters from -1,false to NULL.
  For static GI viewer, see AmbientOcclusion sample.)
- optimized Architect solver (smaller, faster)

CHANGES

- removed honourExpensiveFlags option in renderer, so all objects cast shadows

\section news60 ------------------------------------ 2008.6.26 -------------------------------------

NEWS

- Linux and PS3 Linux added as fully supported platforms
- improved LightsprintGL renderer (better transparency, 2sided faces, specular reflections)
- improved Collada import (1/2sided faces)

CHANGES

- standalone scene loaders merged into LightsprintIO library

\section news59 ------------------------------------ 2008.6.9 -------------------------------------

NEWS

- MovingSun sample, shows global illumination under moving Sun, with moving objects
- Lightfield extended from 3D to 4D, it captures illumination in space and time.
- RRMesh::findGroundLevel(), helper for automatic processing of unknown scene
- RRObject::generateRandomCamera(), helper for automatic processing of unknown scene
- rr_gl::Camera::updateDirFromAngles makes it possible to control camera direction as vector rather than 3 angles
- rr_gl::Camera::setDirection() sets direction as vector rather than angles (one time operation)

CHANGES

- Lightfield creation moved from RRDynamicSolver::createLightField()
  to RRLightField::create() and RRLightField::captureLighting()

*/

};
